import interpolateRing from './interpolateRing.js'

export function interpolateGeometry (geometry, transformFunc, visibilityTreshold = 1) {
  switch (geometry.type) {
    case 'LineString': return interpolateLineString(geometry, transformFunc, visibilityTreshold)
    case 'Polygon': return interpolatePolygon(geometry, transformFunc, visibilityTreshold)
    case 'MultiPolygon': return interpolateMultiPolygon(geometry, transformFunc, visibilityTreshold)
  }
}

function interpolateLineString (geometry, transformFunc, visibilityTreshold) {
  let coordinates = geometry.coordinates
  let interpolatedCoordinates = interpolateRing(coordinates, transformFunc, visibilityTreshold)

  return {
    type: 'LineString',
    coordinates: interpolatedCoordinates
  }
}

function interpolatePolygon (geometry, transformFunc, visibilityTreshold) {
  let coordinates = geometry.coordinates
  let interpolatedCoordinates = []

  for (let i = 0; i < coordinates.length; i++) {
    let ring = coordinates[i]
    let interpolatedRing = interpolateRing(ring, transformFunc, visibilityTreshold)
    interpolatedCoordinates.push(interpolatedRing)
  }

  return {
    type: 'Polygon',
    coordinates: interpolatedCoordinates
  }
}

function interpolateMultiPolygon (geometry, transformFunc, visibilityTreshold) {
  let coordinates = geometry.coordinates
  let interpolatedCoordinates = []

  for (let i = 0; i < coordinates.length; i++) {
    let polygon = coordinates[i]
    let interpolatedPolygon = []

    for (let j = 0; j < polygon.length; j++) {
      let ring = polygon[j]
      let interpolatedRing = interpolateRing(ring, transformFunc, visibilityTreshold)
      interpolatedPolygon.push(interpolatedRing)
    }

    interpolatedCoordinates.push(interpolatedPolygon)
  }

  return {
    type: 'MultiPolygon',
    coordinates: interpolatedCoordinates
  }
}
