import flubber from '../flubber.min.js'

export default function Polygon (fromPolygon, toPolygon) {
  let fromOuterRing = fromPolygon.coordinates[0]
  let toOuterRing = toPolygon.coordinates[0]

  let outerRingInterpolator = flubber.interpolate(fromOuterRing, toOuterRing, { string: false })

  let holes = Math.max(fromPolygon.coordinates.length, toPolygon.coordinates.length) - 1

  if (holes > 0) {
    let interpolatorArray = [outerRingInterpolator]

    for (let i = 1; i <= holes; i++) {
      let fromHole = fromPolygon.coordinates[i]
      let toHole = toPolygon.coordinates[i]

      fromHole.reverse()
      toHole.reverse()

      if (fromHole && toHole) {
        interpolatorArray.push(flubber.interpolate(fromHole, toHole, { string: false }))
      }

      if (fromHole && !toHole) {
        // TODO
      }

      if (!fromHole && toHole) {
        // TODO
      }
    }

    return createPolygonInterpolatorWithHoles(interpolatorArray)
  } else {
    return createPolygonInterpolator(outerRingInterpolator)
  }
}

function createPolygonInterpolatorWithHoles (interpolatorArray) {
  return function (time) {
    let interpolatedValues = []

    for (let i = 0; i < interpolatorArray.length; i++) {
      let interpolatedValue = interpolatorArray[i](time)

      if (i !== 0) {
        interpolatedValue.reverse()
      }

      if (interpolatedValue) {
        interpolatedValues.push(interpolatedValue)
      }
    }

    return {
      type: 'Polygon',
      coordinates: interpolatedValues
    }
  }
}

function createPolygonInterpolator (outerRingInterpolator) {
  return function (time) {
    return {
      type: 'Polygon',
      coordinates: [outerRingInterpolator(time)]
    }
  }
}
