import * as fromPoint from './fromPoint'
import * as fromLineString from './fromLineString'
import * as fromPolygon from './fromPolygon'
import * as fromMultiPolygon from './fromMultiPolygon'

export function transitionGeometries (fromLayer, toLayer) {
  ensureValidTypes(fromLayer, toLayer)

  if (fromLayer.constructor === Array) {
    // TODO when we release this as a separate package
  }

  if (fromLayer.constructor === Object) {
    let transitionObject = {}

    for (let key in fromLayer) {
      if (toLayer.hasOwnProperty(key)) {
        let fromGeometry = fromLayer[key]
        let toGeometry = toLayer[key]

        transitionObject[key] = transitionGeometry(fromGeometry, toGeometry)
      }
    }

    return function (time) {
      let transitioningLayer = {}

      for (let key in transitionObject) {
        transitioningLayer[key] = transitionObject[key](time)
      }

      return transitioningLayer
    }
  }
}

export function transitionGeometry (fromGeometry, toGeometry) {
  let interpolateTransition = transitionMatrix[fromGeometry.type][toGeometry.type]

  return interpolateTransition(fromGeometry, toGeometry)
}

const transitionMatrix = {
  Point: fromPoint,
  LineString: fromLineString,
  Polygon: fromPolygon,
  MultiPolygon: fromMultiPolygon
}

function ensureValidTypes (fromLayer, toLayer) {
  if (fromLayer.constructor === Array && toLayer.constructor === Array) {
    return
  }

  if (fromLayer.constructor === Object && toLayer.constructor === Object) {
    return
  }

  throw new Error(`Geometries must both be an Array, or both be an Object`)
}