# Area

The `Area` mark is used to plot filled areas. It is often used to visualize change over time. It can either be used by itself or in a 'stacked' configuration.

```markup
<script>
  import { Graphic, Area, AreaLayer, XAxis, YAxis } from '@snlab/florence'
  import { scaleLinear, scaleTime } from 'd3-scale'

  const x = [new Date(2002, 0, 1), new Date(2004, 0, 1), new Date(2006, 0, 1)]
  const yFirst = [20, 40, 10]
  const ySecond = [30, 45, 30]
  const yThird = [35, 60, 55]
</script>

<Graphic 
  width={200} height={200}
  scaleX={scaleTime().domain([new Date(2001, 0, 1), new Date(2007, 0, 1)])}
  scaleY={scaleLinear().domain([0, 60])}
  padding={20}
  flipY
>

  <Area x1={x} y1={[0, 0, 0]} y2={yFirst} fill={'red'} />
  <AreaLayer x1={[x, x]} y1={[yFirst, ySecond]} y2={[ySecond, yThird]} fill={['blue', 'green']} />
  
  <XAxis />
  <YAxis />

</Graphic>
```

```js exec
import SimpleExample from './examples/_AreaSimple.svelte'
```

<SimpleExample />

## Properties

### Positioning

|      Prop       | Required |                   Type(s)                    |   Default   |                       Unit(s)                        |
| --------------- | -------- | -------------------------------------------- | ----------- | ---------------------------------------------------- |
| x1              | `true`   | `Number[]`, `String[]`, `Date[]`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| x2              | `false`  | `Number[]`, `String[]`, `Date[]`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| y1              | `true`   | `Number[]`, `String[]`, `Date[]`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| y2              | `false`  | `Number[]`, `String[]`, `Date[]`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| independentAxis | `false`  | `String`                                     | `'x'`       | Either `'x'` or `'y'`                                |

The `Area` is defined by the region between two bounding polylines, which are like Line marks defined with `x1` `y1` and `x2` `y2` props respectively. How an area is bounded (its 'orientation') is determined by the independent variable, which is either derived implicitly from the combination of props or specified explicitly with the `independentAxis`. When x is the independent variable, only the `x1` prop should be specified, with `x2`=`x1`. `y1` represents the upper bound and `y2` the lower bound, which is set to 0 if unspecified. Similarly, when y is the independent variable, only the `y1` prop should be specified, with `y2`=`y1`. `x1` represents the right bound and `x2` the left bound, which is set to 0 if unspecified. This is illustrated in the table below:

```js exec
import HorizontalAreaBoth from './utils/_HorizontalAreaBoth.svelte'
import VerticalAreaRight from './utils/_VerticalAreaRight.svelte'
import VerticalAreaLeft from './utils/_VerticalAreaLeft.svelte'
import HorizontalAreaUpper from './utils/_HorizontalAreaUpper.svelte'
import VerticalAreaBoth from './utils/_VerticalAreaBoth.svelte'
import HorizontalAreaLower from './utils/_HorizontalAreaLower.svelte'
```

|      Prop       |                                                                                  Description                                                                                   |                Representation                |     |     |
| --------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------- | --- | --- |
| x1              | X coordinates of both upper and lower bounds of an area when x is the independent variable;<br>x coordinates of the right bound of an area when y is the independent variable. | <HorizontalAreaBoth /> <VerticalAreaRight /> |     |     |
| x2              | X coordinates of the left bound of an area when y is the independent variable.                                                                                                 | <VerticalAreaLeft />                         |     |     |
| y1              | Y coordinates of the upper bound of an area when x is the independent variable;<br>y coordinates of both left and right bounds of an area when y is the independent variable.  | <HorizontalAreaUpper /> <VerticalAreaBoth /> |     |     |
| y2              | Y coordinates of the lower bound of an area when x is the independent variable.                                                                                                | <HorizontalAreaLower />                      |     |     |
| independentAxis | The independent variable.                                                                                                                                                      |                                              |     |     |

The table below summarizes which combinations of positioning props are allowed: 

| x1  | y1  | x2  | y2  | independentAxis | valid |                         comments                         |
| --- | --- | --- | --- | --------------- | ----- | -------------------------------------------------------- |
|     |     | any | any | any             | ❌     | at least x1 and y1 must be given                         |
|     | ✓   | any | any | any             | ❌     | at least x1 and y1 must be given                         |
| ✓   |     | any | any | any             | ❌     | at least x1 and y1 must be given                         |
| ✓   | ✓   |     |     | 'x'             | ✅     | y2 is set to 0 and broadcasted                           |
| ✓   | ✓   |     |     | 'y'             | ✅     | x2 is set to 0 and broadcasted                           |
| ✓   | ✓   |     | ✓   | 'x'             | ✅     |                                                          |
| ✓   | ✓   |     | ✓   | 'y'             | ❌     | independentAxis must be 'x' when x1, y1 and y2 are given |
| ✓   | ✓   | ✓   |     | 'x'             | ❌     | independentAxis must be 'y' when x1, y1 and x2 are given |
| ✓   | ✓   | ✓   |     | 'y'             | ✅     |                                                          |
| ✓   | ✓   | ✓   | ✓   | 'x'             | ✅     | x2 is ignored                                            |
| ✓   | ✓   | ✓   | ✓   | 'y'             | ✅     | y2 is ignored                                            |

For all positioning props (except `independentAxis`), a function can be supplied that bypasses the scaling step- see the [local coordinates](/docs/concepts/local-coordinates) documentation. When using the `AreaLayer`, all positioning props (except `independentAxis`) will be supplied as `Array`s of `Array`s of `Number`s, `String`s and `Date`s, or `Function`s that return `Array`s of `Array`s of scaled coordinates- see the [marks versus layers](/docs/concepts/marks-vs-layers) documentation.

::: div callout
`independentAxis` is the only positioning prop to which you __always__ pass a `String` and not an `Array` of `String`s, regardless of whether you are using an `Area` or `AreaLayer`! Together with the [FuncLine](/docs/marks/funcline)'s positioning props, it also does not support `Function` syntax, which all other positioning props do.
:::

### Aesthetics

|     Prop      | Required | Type(s)  |   Default   |           Unit(s)            |
| ------------- | -------- | -------- | ----------- | ---------------------------- |
| stroke        | `false`  | `String` | `'none'`    | Named, hex, rgb or hsl color |
| strokeWidth   | `false`  | `Number` | `0`         | Pixel                        |
| strokeOpacity | `false`  | `Number` | `undefined` | Number between 0 and 1       |
| fill          | `false`  | `String` | `'#000000'` | Named, hex, rgb or hsl color |
| fillOpacity   | `false`  | `Number` | `undefined` | Number between 0 and 1       |
| opacity       | `false`  | `Number` | `1`         | Number between 0 and 1       |

These aesthetic props are similar to attributes of the SVG [path](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path) element. The analogous `path` attributes are shown below in brackets:

- `fill` refers to the color of the polygon (`fill`)
- `fillOpacity` refers to the transparency of the polygon, `0` being fully transparent (`fill-opacity`)
- `stroke` refers to the color of the polygon's outline (`stroke`)
- `strokeWidth` refers to the width of the polygon's outline (`stroke-width`)
- `strokeOpacity` refers to the transparency of the polygon's outline, `0` being fully transparent (`stroke-opacity`)
- `opacity` sets both the `strokeOpacity` and the `fillOpacity` (`opacity`)

### Transitions

|    Prop    | Required |      Type(s)       |   Default   |             Unit(s)              |
| ---------- | -------- | ------------------ | ----------- | -------------------------------- |
| transition | `false`  | `Number`, `Object` | `undefined` | Duration in ms or options object |

See the [transition](/docs/concepts/transitions) documentation for more information.

### Interactions

#### Mouse events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onClick     | `false`  | `Function` | `undefined` | -      |
| onMousedown | `false`  | `Function` | `undefined` | -      |
| onMouseup   | `false`  | `Function` | `undefined` | -      |
| onMouseover | `false`  | `Function` | `undefined` | -      |
| onMouseout  | `false`  | `Function` | `undefined` | -      |
| onMousedrag | `false`  | `Function` | `undefined` | -      |

#### Touch events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onTouchdown | `false`  | `Function` | `undefined` | -      |
| onTouchup   | `false`  | `Function` | `undefined` | -      |
| onTouchover | `false`  | `Function` | `undefined` | -      |
| onTouchout  | `false`  | `Function` | `undefined` | -      |
| onTouchdrag | `false`  | `Function` | `undefined` | -      |

#### Select events

|    Prop    | Required |  Type(s)   |   Default   | Unit(s) |
| ---------- | -------- | ---------- | ----------- | ------- |
| onSelect   | `false`  | `Function` | `undefined` | -      |
| onDeselect | `false`  | `Function` | `undefined` | -      |

See the [interactivity](/docs/concepts/interactivity) documentation for more information.

### Other

|      Prop       | Required |  Type(s)  |   Default   | Unit(s) |
| --------------- | -------- | --------- | ----------- | ------- |
| renderSettings  | `false`  | `Object`  | `undefined` | -      |
| blockReindexing | `false`  | `Boolean` | `false`     | -      |
| clip            | `false`  | `Boolean` | `true`      | -      |

- `renderSettings`: see the [advanced rendering](/docs/concepts/advanced-rendering) documentation for more information
- `blockReindexing`: see the [interactivity](/docs/concepts/interactivity) documentation for more information.
- `clip`: indicates whether the Mark or Layer should be clipped off if it extends beyond its parent `Section` or `Graphic` viewport (i.e. the area within the padding). 

In addition, the `AreaLayer` has the `key` prop:

| Prop | Required |  Type(s)   |   Default   |       Unit(s)        |
| ---- | -------- | ---------- | ----------- | -------------------- |
| key  | `false`  | `String[]` | `undefined` | Array of unique keys |

See the [marks versus layers](/docs/concepts/marks-vs-layers) documentation for more information on how keys work.

## Examples

The `Area` and `AreaLayer` can be seen in action in the following examples:

- [Area Chart](/examples/area-chart)
- [Stacked Area Chart](/examples/stacked-area)
- [Violin Plot](/examples/violin-plot)
