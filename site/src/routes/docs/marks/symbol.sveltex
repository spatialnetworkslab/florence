# Symbol

The `Symbol_` mark, like the [Point](/docs/marks/point), is used for plotting point data. Unlike the `Point` mark, however, it supports a variety of different shapes or symbols. The most common use for the `Symbol_` mark is a scatterplot where a categorical variable is mapped to various shapes. It can also be used to indicate locations on a map.

```markup
<script>
  import { Graphic, Symbol_, SymbolLayer, XAxis, YAxis } from '@snlab/florence'
</script>

<Graphic width={200} height={200} scaleX={[0, 10]} scaleY={[0, 10]} padding={20}>

  <Symbol_ x={2.5} y={2.5} shape={'star5'} />
  <SymbolLayer x={[5, 7.5]} y={[5, 7.5]} shape={['triangle-up', 'diamond']} />
  
  <XAxis />
  <YAxis />

</Graphic>
```

```js exec
import SimpleExample from './examples/_SymbolSimple.svelte'
```
<SimpleExample />

::: div callout
Note that the symbol mark is imported/used as `Symbol_` to prevent conflicts with the native JavaScript `Symbol`.
:::

## Properties

### Positioning

| Prop |                 Required                  |                                  Type(s)                                   |   Default   |                      Unit(s)(s)                      |
| ---- | ----------------------------------------- | -------------------------------------------------------------------------- | ----------- | ---------------------------------------------------- |
| x    | `if (geometry === undefined)`             | `Number`, `String`, `Date`, `Function`                                     | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| y    | `if (geometry === undefined)`             | `Number`, `String`, `Date`, `Function`                                     | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| geometry    | `if (x === undefined && y === undefined)` | GeoJSON [Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) feature | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |

To render a `Symbol_`, you will need to provide either the `x` and `y` props, or the `geometry` prop. The two uses are mutually exclusive. The `x` and `y` coordinates, or the coordinates in the GeoJSON feature passed to `geometry`, refer to the center of the point.

`x` and `y` can be of type `Number`, `String` and `Date`, depending on the scales used in the parent [Section](/docs/core/section). `geometry` accepts GeoJSON [Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) features only. Coordinates inside the GeoJSON geometry will similarly be treated as unscaled.  For all positioning props,  a function can be supplied that bypasses the scaling step- see the [local coordinates](/docs/concepts/local-coordinates) documentation. When using the `SymbolLayer`, all positioning props will be supplied as `Array`s of `Number`s, `String`s and `Date`s, or `Function`s that return `Array`s of scaled coordinates- see the [marks versus layers](/docs/concepts/marks-vs-layers) documentation.

### Aesthetics

|     Prop      | Required |  Types   |   Default   |           Unit(s)            |
| ------------- | -------- | -------- | ----------- | ---------------------------- |
| shape         | `false`  | `String` | `'circle'`  | See explanation              |
| size          | `false`  | `Number` | `10`        | Pixel                        |
| fill          | `false`  | `String` | `'#000000'` | Named, hex, rgb or hsl color |
| fillOpacity   | `false`  | `Number` | `undefined` | Number between 0 and 1       |
| stroke        | `false`  | `String` | `'none'`    | Named, hex, rgb or hsl color |
| strokeWidth   | `false`  | `Number` | `0`         | Pixel                        |
| strokeOpacity | `false`  | `Number` | `undefined` | Number between 0 and 1       |
| opacity       | `false`  | `Number` | `1`         | Number between 0 and 1       |

- `shape` sets the shape of the `Symbol_` mark. The value defaults to `'circle'`. Some other pre-defined shapes include `square`, `cross`, `diamond`, `triangle-up`, `triangle-down`, `triangle-left`, `triangle-right` and `star`. For a full list of options, refer to the [list of geometries](https://github.com/spatialnetworkslab/florence/blob/master/src/components/Marks/Symbol/geometryAlias.js). In addition, it is possible to provide a custom shape, specified as a GeoJSON [Polygon](https://tools.ietf.org/html/rfc7946#section-3.1.6) feature, with a bounding box of `[-1, 1]` both horizontally and vertically. For example:

```markup
<script>
  import { Graphic, Symbol_, XAxis, YAxis } from '@snlab/florence'

  const septagon = {
    type: 'Polygon',
    coordinates: [[
      [-1, 0.29], [-0.8, -0.6], [0, -1], [0.8, -0.6], [1, 0.29],
      [0.45, 1], [-0.45, 1], [-1, 0.29], [-1, 0.29]
    ]],
  }
</script>

<Graphic width={200} height={200} scaleX={[0, 10]} scaleY={[0, 10]} padding={20}>

  <Symbol_ x={5} y={5} shape={septagon} size={100} />
  
  <XAxis />
  <YAxis />

</Graphic>
```

```js exec
import CustomShape from './utils/_CustomShape.svelte'
```
<CustomShape />

- `size` defaults to 10 pixels. This same value refers to both the height and width of the shape, or 2 times the `radius` if it would be a circle. In order to improve the accuracy when reading off the (x, y) values of the center point of each symbol instance, the height and width of the symbol mark are not allowed to take on different values.
- `fill` refers to the color of the symbol
- `fillOpacity` refers to the transparency of the symbol, `0` being fully transparent
- `stroke` refers to the color of the symbol's outline
- `strokeWidth` refers to the width of the symbol's outline
- `strokeOpacity` refers to the transparency of the symbol's outline, `0` being fully transparent
- `opacity` sets both the `strokeOpacity` and the `fillOpacity`

### Transitions

|    Prop    | Required |      Type(s)       |   Default   |             Unit(s)              |
| ---------- | -------- | ------------------ | ----------- | -------------------------------- |
| transition | `false`  | `Number`, `Object` | `undefined` | Duration in ms or options object |

See the [transition](/docs/concepts/transitions) documentation for more information.

### Interactions

#### Mouse events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onClick     | `false`  | `Function` | `undefined` | -      |
| onMousedown | `false`  | `Function` | `undefined` | -      |
| onMouseup   | `false`  | `Function` | `undefined` | -      |
| onMouseover | `false`  | `Function` | `undefined` | -      |
| onMouseout  | `false`  | `Function` | `undefined` | -      |
| onMousedrag | `false`  | `Function` | `undefined` | -      |

#### Touch events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onTouchdown | `false`  | `Function` | `undefined` | -      |
| onTouchup   | `false`  | `Function` | `undefined` | -      |
| onTouchover | `false`  | `Function` | `undefined` | -      |
| onTouchout  | `false`  | `Function` | `undefined` | -      |
| onTouchdrag | `false`  | `Function` | `undefined` | -      |

#### Select events

|    Prop    | Required |  Type(s)   |   Default   | Unit(s) |
| ---------- | -------- | ---------- | ----------- | ------- |
| onSelect   | `false`  | `Function` | `undefined` | -      |
| onDeselect | `false`  | `Function` | `undefined` | -      |

See the [interactivity](/docs/concepts/interactivity) documentation for more information.

### Other

|      Prop       | Required |  Type(s)  |   Default   | Unit(s) |
| --------------- | -------- | --------- | ----------- | ------- |
| renderSettings  | `false`  | `Object`  | `undefined` | -      |
| blockReindexing | `false`  | `Boolean` | `false`     | -      |
| clip            | `false`  | `Boolean` | `true`      | -      |

- `renderSettings`: see the [advanced rendering](/docs/concepts/advanced-rendering) documentation for more information
- `blockReindexing`: see the [interactivity](/docs/concepts/interactivity) documentation for more information.
- `clip`: indicates whether the Mark or Layer should be clipped off if it extends beyond its parent `Section` or `Graphic` viewport (i.e. the area within the padding). 

In addition, the `SymbolLayer` has the `key` prop:

| Prop | Required |  Type(s)   |   Default   |       Unit(s)        |
| ---- | -------- | ---------- | ----------- | -------------------- |
| key  | `false`  | `String[]` | `undefined` | Array of unique keys |

See the [marks versus layers](/docs/concepts/marks-vs-layers) documentation for more information on how keys work.

## Examples

The `Symbol_` and `SymbolLayer` can be seen in action in the following examples:

- [Isotype Plot](/examples/isotype)
