# Polygon

The `Polygon` mark can be used to draw a variety of shapes. Use cases include maps or contours.

```markup
<script>
  import { Graphic, Polygon, PolygonLayer, XAxis, YAxis } from '@snlab/florence'
</script>

<Graphic width={200} height={200} scaleX={[0, 10]} scaleY={[0, 10]} padding={20}>

  <Polygon
    x={[0, 2.5, 2.5]}
    y={[0, 2.5, 0]}
    fill={'red'}
  />

  <PolygonLayer 
    x={[[5, 7, 5, 3], [10, 7.5, 7.5]]} 
    y={[[7, 5, 3, 5], [10, 7.5, 10]]}
    fill={['blue', 'green']}
  />

  <XAxis />
  <YAxis />

</Graphic>
```

```js exec
import SimpleExample from './examples/_PolygonSimple.svelte'
```

<SimpleExample />


## Properties

### Positioning

|   Prop   |                 Required                  |                                       Type(s)                                        |   Default   |                      Unit(s)(s)                      |
| -------- | ----------------------------------------- | ------------------------------------------------------------------------------------ | ----------- | ---------------------------------------------------- |
| x        | `if (geometry === undefined)`             | `Number[]`, `String[]`, `Date[]`, `Function`                                         | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| y        | `if (geometry === undefined)`             | `Number[]`, `String[]`, `Date[]`, `Function`                                         | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| geometry | `if (x === undefined && y === undefined)` | Array of GeoJSON [LineString](https://tools.ietf.org/html/rfc7946#section-3.1.2) or [MultiLineString](https://tools.ietf.org/html/rfc7946#section-3.1.5) features | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |

`x` and `y` have to be arrays of `Number`s, `String`s or `Date`s, depending on the scale used in the parent [Section](/docs/core/section). `geometry` accepts arrays of GeoJSON [Polygon](https://tools.ietf.org/html/rfc7946#section-3.1.6) and [MultiPolygon](https://tools.ietf.org/html/rfc7946#section-3.1.7) objects only. For all positioning props,  a function can be supplied that bypasses the scaling step- see the [local coordinates](/docs/concepts/local-coordinates) documentation. When using the `PolygonLayer`, all positioning props will be supplied as `Array`s of `Array`s of `Number`s, `String`s and `Date`s, or `Function`s that return `Array`s of `Array`s of scaled coordinates- see the [marks versus layers](/docs/concepts/marks-vs-layers) documentation.

::: div callout
Note that `Polygon`s have to 'close', meaning that the last coordinate pair has to be identical to the first. `florence` will close unclosed `x` and `y` arrays automatically. GeoJSON geometries are (according to their specification) supposed to be 'closed' by default, so in theory you should not have to worry about closing polygons when using the `geometry` prop. In practice, however, this is not always the case. So, if the drawn polygons look weird, it might be worth checking of the geometries are closed!
:::

### Aesthetics

|     Prop      | Required | Type(s)  |   Default   |           Unit(s)            |
| ------------- | -------- | -------- | ----------- | ---------------------------- |
| fill          | `false`  | `String` | `'#000000'` | Named, hex, rgb or hsl color |
| fillOpacity   | `false`  | `Number` | `undefined` | Number between 0 and 1       |
| stroke        | `false`  | `String` | `'none'`    | Named, hex, rgb or hsl color |
| strokeWidth   | `false`  | `Number` | `0`         | Pixel                        |
| strokeOpacity | `false`  | `Number` | `undefined` | Number between 0 to 1        |
| opacity       | `false`  | `Number` | `1`         | Number between 0 and 1       |

These aesthetic props are similar to attributes of the SVG [polygon](https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon) element. The analogous `polygon` attributes are shown below in brackets:

- `fill` refers to the color of the polygon (`fill`)
- `fillOpacity` refers to the transparency of the polygon, `0` being fully transparent (`fill-opacity`)
- `stroke` refers to the color of the polygon's outline (`stroke`)
- `strokeWidth` refers to the width of the polygon's outline (`stroke-width`)
- `strokeOpacity` refers to the transparency of the polygon's outline, `0` being fully transparent (`stroke-opacity`)
- `opacity` sets both the `strokeOpacity` and the `fillOpacity` (`opacity`)

### Transitions

|    Prop    | Required |      Type(s)       |   Default   |             Unit(s)              |
| ---------- | -------- | ------------------ | ----------- | -------------------------------- |
| transition | `false`  | `Number`, `Object` | `undefined` | Duration in ms or options object |

See the [transition](/docs/concepts/transitions) documentation for more information.

### Interactions

#### Mouse events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onClick     | `false`  | `Function` | `undefined` | -      |
| onMousedown | `false`  | `Function` | `undefined` | -      |
| onMouseup   | `false`  | `Function` | `undefined` | -      |
| onMouseover | `false`  | `Function` | `undefined` | -      |
| onMouseout  | `false`  | `Function` | `undefined` | -      |
| onMousedrag | `false`  | `Function` | `undefined` | -      |

#### Touch events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onTouchdown | `false`  | `Function` | `undefined` | -      |
| onTouchup   | `false`  | `Function` | `undefined` | -      |
| onTouchover | `false`  | `Function` | `undefined` | -      |
| onTouchout  | `false`  | `Function` | `undefined` | -      |
| onTouchdrag | `false`  | `Function` | `undefined` | -      |

#### Select events

|    Prop    | Required |  Type(s)   |   Default   | Unit(s) |
| ---------- | -------- | ---------- | ----------- | ------- |
| onSelect   | `false`  | `Function` | `undefined` | -      |
| onDeselect | `false`  | `Function` | `undefined` | -      |

See the [interactivity](/docs/concepts/interactivity) documentation for more information.

### Other

|      Prop       | Required |  Type(s)  |   Default   | Unit(s) |
| --------------- | -------- | --------- | ----------- | ------- |
| renderSettings  | `false`  | `Object`  | `undefined` | -      |
| blockReindexing | `false`  | `Boolean` | `false`     | -      |
| clip            | `false`  | `Boolean` | `true`      | -      |

- `renderSettings`: see the [advanced rendering](/docs/concepts/advanced-rendering) documentation for more information
- `blockReindexing`: see the [interactivity](/docs/concepts/interactivity) documentation for more information.
- `clip`: indicates whether the Mark or Layer should be clipped off if it extends beyond its parent `Section` or `Graphic` viewport (i.e. the area within the padding). 

In addition, the `PolygonLayer` has the `keys` prop:

| Prop | Required |  Type(s)   |   Default   |       Unit(s)        |
| ---- | -------- | ---------- | ----------- | -------------------- |
| keys  | `false`  | `String[]` | `undefined` | Array of unique keys |

See the [marks versus layers](/docs/concepts/marks-vs-layers) documentation for more information on how keys work.

## Examples

The `Polygon` and `PolygonLayer` can be seen in action in the following examples:

- [Choropleth](/examples/choropleth)
- [Choropleth Map of Singapore](examples/choropleth-map)
- [Density Contours](/examples/density-contours)
