# Local coordinates

## Description

Understanding how local coordinates work is key to understanding `florence`.
The `Graphic` and `Section` components can create local coordinate systems,
and all other components are affected by local coordinate systems.

## Creating local coordinate systems

As stated above, local coordinate systems are created with the `Graphic` and `Section`
components. The following props are used to create local coordinate systems:

|      Prop      |                  Type(s)                   | Required |   Default    |     Units     |
| -------------- | ------------------------------------------ | -------- | ------------ | ------------- |
| scaleX         | [d3 scale](https://github.com/d3/d3-scale) | no       | `undefined`  | -             |
| scaleY         | [d3 scale](https://github.com/d3/d3-scale) | no       | `undefined`  | -             |
| transformation | `String`: `'identity'` or `'polar'`        | no       | `'identity'` | -             |
| flipX          | `Boolean`                                  | no       | `false`      | -             |
| flipY          | `Boolean`                                  | no       | `false`      | -             |
| padding        | `Number`, `Object`                         | no       | `undefined`  | screen pixels |
| zoomIdentity   | `Object`                                   | no       | `undefined`  | -             |

The purpose of a local coordinate system is to convert coordinates, given to components within a `Graphic` or `Section`, to pixel values that end up on your screen. All marks and layers have so-called 'positioning props'. Below is a schematic representation of how `florence` converts local coordinates to pixel values:

![coordinates](/images/coordinates.png)

(Made with [draw.io](https://draw.io))

The three main steps in this process are:

1. Scaling
2. Applying the coordinate transformation
3. Applying the 'final' transformation, which encompasses padding, zooming and flipping.

These three concepts will be explained in depth in the next paragraphs.

## Scaling

### Basics

Scaling is the process of ["mapping a dimension of abstract data to a visual representation"](https://github.com/d3/d3-scale). In `florence`, this is not always true. The output of the scaling step is not necessarily the final 'visual representation' (a pixel value). If the user chooses to apply a coordinate transformation, the output of the scaling step goes through another step of processing. Or, if the user specifies the `padding`, `flipX`, `flipY` or `zoomIdentity` props, there will be another ('final') step before we obtain a pixel value. But for now, let's forget about coordinate transformations and things like padding and flipping, and look at how scaling works in isolation.

To scale coordinates in a local coordinate system, pass a [d3 scale](https://github.com/d3/d3-scale) to `scaleX` or `scaleY`. D3 scales are functions that map domains to ranges, where a domain is the 'abstract data dimension' and the range is the output dimension. In `florence`, the range will be taken care of for you, so you only need to define the domain.

Say that we have the following point:

```js
const point = { x: 5, y: 5 }
```

And we want to position this point in the middle of the following `Graphic`:

```js
import { Graphic } from '@snlab/florence'
```

```
<Graphic 
  width={200}
  height={200}
>

</Graphic>
```

If we want to use the point's original coordinates, we can position it in the center using d3's [scaleLinear](https://github.com/d3/d3-scale#scaleLinear). We will also give the `Graphic` a background color. This makes it easier to see that the `Point` is actually in the middle.

```js
import { Graphic, Point } from '@snlab/florence'
import { scaleLinear } from 'd3-scale'
```

```
<Graphic 
  width={200}
  height={200}
  scaleX={scaleLinear().domain([0, 10])}
  scaleY={scaleLinear().domain([0, 10])}
  backgroundColor="#b2ffb2"
>

  <Point x={point.x} y={point.y} radius={10} fill="red" />

</Graphic>
```

```js exec
import CenterPoint from './examples/_CenterPoint.svelte'
import CenterPointWH from './examples/_CenterPointWH.svelte'
```

<CenterPoint />

This might seem pointless: why not just leave out the scales, and position the point at `x={100}`, and `y={100}`? One reason might be that the `width` and `height` of the `Section` are variables that can change on user input. If that is the case, the scaling logic will make sure that the point stays in the right place:

<CenterPointWH />

### Non-numeric data

Scaling can also be used to convert `String`s or `Date`s, as long as the correct d3 scale is chosen.

```js exec
import StringTemporal from './examples/_StringTemporal.svelte'
```

```js
import { Graphic, Rectangle } from '@snlab/florence'
import { scalePoint, scaleTime } from 'd3-scale'

const domainX = ['a', 'b', 'c', 'd', 'e']
const domainY = [new Date(2020, 1, 1), new Date(2020, 1, 10)])
```

```
<Graphic
  width={200}
  height={200}
  scaleX={scalePoint().domain(domainX)}
  scaleY={scaleTime().domain(domainY)}
>

  <Rectangle
    x1="a" x2="e"
    y1={new Date(2020, 1, 1)} y2={new Date(2020, 1, 5)}
    fill="blue"
    opacity={0.5}
  />

  <Rectangle
    x1="b" x2="d"
    y1={new Date(2020, 1, 3)} y2={new Date(2020, 1, 10)}
    fill="red"
    opacity={0.5}
  />

</Graphic>
```

<StringTemporal />

### Domain shorthand

It is also possible to simply pass the domain to `scaleX` or `scaleY`. In this case, `florence` will create a linear scale from the domain. Therefore this:

```
<Graphic scaleX={[0, 10]}>
```

is equal to this:

```
<Graphic scaleX={scaleLinear().domain([0, 10])}>
```

### Function syntax

Even when `scaleX` and `scaleY` are used, it is possible to bypass them. To do this, pass the positioning prop a function that returns a coordinate, instead of a bare coordinate:

```js exec
import CenterPointFunc from './examples/_CenterPointFunc.svelte'
```

```
<Graphic 
  width={200}
  height={200}
  scaleX={scaleLinear().domain([0, 10])}
  scaleY={scaleLinear().domain([0, 10])}
  backgroundColor="#b2ffb2"
>

  <Point x={point.x} y={point.y} radius={20} fill="red" />

  <Point x={() => 100} y={() => 100} radius={10} fill="green" />

</Graphic>
```

<CenterPointFunc />

## Coordinate transformation

Currently, the only supported coordinate transformation is `'polar'`. More transformations will be supported in the future. When using a polar transformation, `x` values will be displayed as if they were converted to theta, and `y` values will appear like the radius. In polar coordinate systems usually encountered in mathematics, the coordinate system begins on the right and turns counterclockwise. In `florence`, however, the polar coordinate system starts at the bottom of the `Section`. Check out the following code and the resulting output, and try switching the transformation from identity to polar:

```js exec
import PolarShowcase from './examples/_PolarShowcase.svelte'
```

```js
let transformation = 'identity'
```

```
<div>
  <label for="coordinate-select">Coordinates:</label>
  <select name="coordinate-select" bind:value={transformation}>
    <option value="identity">Identity</option>
    <option value="polar">Polar</option>
  </select>
</div>

<Graphic 
  width={500}
  height={500}
  {transformation}
  backgroundColor="#b2ffb2"
>

  <Rectangle fill="white" opacity={0.4} transition={2000} />

  <LineLayer 
    x={[[0, 0], [125, 125], [250, 250], [375, 375]]}
    y={[[0, 500], [0, 500], [0, 500], [0, 500]]}
    stroke={lineStrokes}
    transition={2000}
  />

  <LabelLayer
    x={[0, 125, 250, 375]}
    y={[250, 250, 250, 250]}
    text={[0, 125, 250, 375]}
    transition={2000}
  />

</Graphic>
```

<PolarShowcase />

When used in combination with `flipY`, the coordinate system starts at the top, and goes clockwise. This is useful to make, for example, pie charts:

<PolarShowcase flipY />

Polar coordinates can be used either with or without scales. In the examples above, no scales are being used. But combining a polar transformation with scaling works fine too:

```js exec
import PolarScalingShowcase from './examples/_PolarScalingShowcase.svelte'
```

```
<Graphic
  width={500}
  height={500}
  {transformation}
  backgroundColor="#b2ffb2"
  scaleX={scaleLinear().domain([0, 4])}
  scaleY={scaleLinear().domain([0, 4])}
>

  <Rectangle fill="white" opacity={0.4} transition={2000} />

  <LineLayer 
    x={[[0, 0], [1, 1], [2, 2], [3, 3]]}
    y={[[0, 4], [0, 4], [0, 4], [0, 4]]}
    stroke={["red", "orange", "yellow" , "green"]}
    transition={2000}
  />

  <LabelLayer
    x={[0, 1, 2, 3]}
    y={[2, 2, 2, 2]}
    text={[0, 1, 2, 3]}
    transition={2000}
  />

</Graphic>
```

<PolarScalingShowcase />

## Final transformation

The last step in going from local coordinates to pixel values is the 'final' transformation. `florence` internally treats this as a single step, but conceptually it can be divided into three sub-steps: flipping, padding and zooming.

### Flipping

'Flipping' refers to using the `flipX` and `flipY` props to 'flip' to inverse the final output. `flipY` is particularly useful. Web coordinates run from top to bottom by default, but when making graphics, we usually expect coordinates to run from bottom to top. `flipY` provides a convenient way to invert this behavior.

Without using `flipX` and `flipY`, the following point will be in the top left corner:

```js exec
import Flip from './examples/_Flip.svelte'
```

```
<Graphic
  width={200}
  height={200}
  backgroundColor="#b2ffb2"
>
  <Point x={10} y={10} radius={10} />
</Graphic>
```

<Flip />

With `flipX` and `flipY`, it is moved to the bottom right corner instead:

```
<Graphic
  width={200}
  height={200}
  flipX
  flipY
  backgroundColor="#b2ffb2"
>
  <Point x={10} y={10} radius={10} />
</Graphic>
```

<Flip flip={true} />

### Padding

Padding is used to create space between the `Graphic` or `Section`'s outer borders and their contents. The `padding` prop can be used in to ways: by giving it a `Number` or an `Object`. If given an `Object`, it must have the following structure:

```js
{
  left: <Number>,
  right: <Number>,
  top: <Number>,
  bottom: <Number>
}
```

If given a `Number`, for example `20`, the padding will internally be converted to

```js
{
  left: 20,
  right: 20,
  top: 20,
  bottom: 20
}
```

An example:

```js exec
import Padding from './examples/_Padding.svelte'
```

```js
import { Graphic, Rectangle } from '@snlab/florence'
```

```
<Graphic 
  width={200}
  height={200}
  padding={25}
  paddingColor="blue"
>
  <Rectangle x1={0} x2={200} y1={0} y2={200} fill="red" />
</Graphic>
```

<Padding />

### Zooming

Sections can be zoomed using the `zoomIdentity` prop. `zoomIdentity` has to be an `Object` with the following structure:

```js
{
  x: <Number>,
  y: <Number>,
  kx: <Number>,
  ky: <Number>
}
```

Where `x` is the translation in the x dimension (higher = further to the right), `y` is the translation in the y dimension (higher = further down),
and `kx` and `ky` are the zooming factors in respectively the x and y dimensions. `x` and `y` are in pixel values. The identity transformation is

```js
{
  x: 0,
  y: 0,
  kx: 1,
  ky: 1
}
```

An example:

```js exec
import Zoom from './examples/_Zoom.svelte'
```

```js
import { Graphic, Point, Label } from '@snlab/florence'
  
const zoomIdentity = {
  x: 50,
  y: -50,
  kx: 2,
  ky: 2
}
```

```
<Graphic
  width={200}
  height={200}
  {zoomIdentity}
  backgroundColor="#b2ffb2"
>
  <Point x={25} y={100} radius={10} />
</Graphic>
```

<Zoom />

## Nesting Sections

In all the examples above, `Graphic` components were used. While this is fine for simple graphics, more complicated graphics will often require multiple coordinate systems. This can be accomplished by using `Section`s. `Section`s can be positioned in the same way as `Rectangle`s- see the [Section](/docs/core/section) documentation. The `Section` can then be used to define a new local coordinate system. `Section`s can even be nested. However, a `Section` that has an active coordinate transformation cannot contain any other `Section`s. 

An example:

```js exec
import NestedSection from './examples/_NestedSection.svelte'
```

```js
import { Graphic, Section, Point } from '@snlab/florence'
import { scaleLinear } from 'd3-scale'
```

```
<Graphic
  width={500}
  height={500}
  padding={20}
  paddingColor="#b2ffb2"
>

  <Section 
    y1={0}
    y2={250}
    scaleX={scaleLinear().domain([0, 10])}
    scaleY={scaleLinear().domain([0, 10])}
  >

    <Point x={5} y={5} radius={10} fill="red" />

    <Section 
      x1={0}
      x2={5}
      y1={0}
      y2={5}
      scaleX={scaleLinear().domain([0, 10])}
      scaleY={scaleLinear().domain([0, 10])}
    >

      <Point x={5} y={5} radius={10} fill="orange" />
    
    </Section>
  
  </Section>

  <Section 
    y1={250}
    y2={500}
    scaleX={scaleLinear().domain([50, 60])}
    scaleY={scaleLinear().domain([50, 60])}
  >

    <Point x={55} y={55} radius={10} fill="blue" />
  
  </Section>

</Graphic>
```

<NestedSection />

## Examples

### Scaling example

This example will illustrate working with `String`s and d3's [scalePoint](https://github.com/d3/d3-scale#scalePoint). Let's say that a street artist has three favorite locations to play: the square, the park, and the mall. Every day she randomly picks a location where she plays all day, and at the end of the day she writes down the location and how much money she made. To have some insight in which locations yield the best results, she decides to visualize the data of the last 100 days, which is stored in two `Array`s: `location` and `money`. How would she accomplish this in `florence`? For this example, we will also use axes, to make the result a bit easier to interpret.

```js exec
import StreetArtist from './examples/_StreetArtist.svelte'
```

```js
import { Graphic, PointLayer, XAxis, YAxis } from '@snlab/florence'
import { scaleLinear, scalePoint } from 'd3-scale'

const { location, money } = getData()

const locations = ['square', 'park', 'mall']
```

```
<Graphic
  width={200}
  height={200}
  scaleX={scalePoint().domain(locations).padding(0.2)}
  scaleY={scaleLinear().domain([0, 100])}
  padding={20}
  flipY
>

  <PointLayer x={location} y={money} opacity={0.5} />

  <XAxis />
  <YAxis />

</Graphic>
```

<StreetArtist />
