# Graphic

Every `florence` graphic starts with the `Graphic` component. Think of
it as a supercharged `svg` root element.

```markup
<script>
  import { Graphic } from '@snlab/florence'
</script>

<Graphic width={200} height={200} backgroundColor={'blue'}>

</Graphic>
```

```js exec
import SimpleExample from './examples/_GraphicSimple.svelte'
```

<SimpleExample />

::: div callout
`florence` components cannot be used outside of a `Graphic` component, and `Graphic` components cannot be nested.
:::

## Properties

### Positioning

|  Prop   |            Required            |      Type(s)       |           Default            |      Unit(s)      |             |                                                                                           |
| ------- | ------------------------------ | ------------------ | ---------------------------- | ----------------- | ----------- | ----------------------------------------------------------------------------------------- |
| width   | `true`                        | `Number`, `String` | `500`                        | Pixel, percentage |             |                                                                                           |
| height  | `true`                        | `Number`, `String` | `500`                        | Pixel, percentage |             |                                                                                           |
| viewBox | `if (typeof width === 'string' && typeof height === 'string')` | `String`          | `undefined` | [viewBox coordinates](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox) |

In most cases, the `Graphic` will be positioned by providing the `width` and `height` in pixels, like so:

```markup
<Graphic width={800} height={600}>
```

However, in responsive layouts, it can be desirable to define the `Graphic`'s `width` and `height` in percentages relative to its parent element. In this case, the `viewBox` prop must be specified in [viewBox coordinates](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox), which will determine the `Graphic`'s local coordinate system. Note, however, that this changes all variables that are defined in pixels! The radius below, for example, is much larger than 20px (depending on your screen size):

```markup
<script>
  import { Graphic, Point } from '@snlab/florence'
</script>

<Graphic
  width={'50%'}
  height={'100%'}
  viewBox={'0 0 100 100'}
  backgroundColor={'#d3d3d3'}
>

  <Point x={50} y={50} radius={20} />

</Graphic>
```

```js exec
import ViewBoxExample from './examples/_ViewBoxSimple.svelte'
```

<ViewBoxExample />

::: div callout
`width` and `height` must always be of the same type, so either both `Number` or both `String`.
:::

### Aesthetics

|      Prop       | Required | Type(s)  |   Default   |           Unit(s)            |
| --------------- | -------- | -------- | ----------- | ---------------------------- |
| backgroundColor | `false`  | `String` | `undefined` | Named, hex, rgb or hsl color |
| paddingColor    | `false`  | `String` | `undefined` | Named, hex, rgb or hsl color |

`backgroundColor` is the area within the padded area, and `paddingColor` is the background of the padded area (see `padding` below).

### Local coordinate system

|      Prop      | Required |      Type(s)       |   Default    |                  Unit(s)                   |
| -------------- | -------- | ------------------ | ------------ | ------------------------------------------ |
| scaleX         | `false`  | `Function`         | `undefined`  | [d3 scale](https://github.com/d3/d3-scale) |
| scaleY         | `false`  | `Function`         | `undefined`  | [d3 scale](https://github.com/d3/d3-scale) |
| transformation | `false`  | `String`           | `'identity'` | Should be either `'identity'` or `'polar'` |
| flipX          | `false`  | `Boolean`          | `false`      | -                                          |
| flipY          | `false`  | `Boolean`          | `false`      | -                                          |
| padding        | `false`  | `Number`, `Object` | `undefined`  | Pixel                                      |
| zoomIdentity   | `false`  | `Object`           | `undefined`  | -                                          |

For more how to use these props, see the [local coordinates](/docs/concepts/local-coordinates) documentation.

### Interactions

#### Mouse events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onClick     | `false`  | `Function` | `undefined` | -      |
| onMousedown | `false`  | `Function` | `undefined` | -      |
| onMouseup   | `false`  | `Function` | `undefined` | -      |
| onMouseover | `false`  | `Function` | `undefined` | -      |
| onMouseout  | `false`  | `Function` | `undefined` | -      |
| onMousedrag | `false`  | `Function` | `undefined` | -      |

#### Touch events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onTouchdown | `false`  | `Function` | `undefined` | -      |
| onTouchup   | `false`  | `Function` | `undefined` | -      |
| onTouchover | `false`  | `Function` | `undefined` | -      |
| onTouchout  | `false`  | `Function` | `undefined` | -      |
| onTouchdrag | `false`  | `Function` | `undefined` | -      |

#### Select events

|    Prop    | Required |  Type(s)   |   Default   | Unit(s) |
| ---------- | -------- | ---------- | ----------- | ------- |
| onSelect   | `false`  | `Function` | `undefined` | -      |
| onDeselect | `false`  | `Function` | `undefined` | -      |

See the [interactivity](/docs/concepts/interactivity) documentation for more information.

### Other

|      Prop       | Required |  Type(s)  | Default | Unit(s) |
| --------------- | -------- | --------- | ------- | ------- |
| blockReindexing | `false`  | `Boolean` | `false` | -       |
| clip            | `false`  | `Boolean` | `true`  | -       |

The purpose of `blockReindexing` is explained in the [interactivity](/docs/concepts/interactivity) documentation. `clip` indicates whether the marks or layers inside of this `Graphic` should be clipped off if they extends this `Graphic`'s viewport (i.e. the area within the padding).

## Methods

- `selectRectangle`
- `updateSelectRectangle`
- `resetSelectRectangle`
- `startSelectPolygon`
- `addPointToSelectPolygon`
- `moveSelectPolygon`
- `resetSelectPolygon`

`Graphic` methods can be used as follows:

```markup
<script>
  let graphic
  graphic.selectRectangle(...)
</script>

<Graphic width={500} height={500} bind:this={graphic}>

</Graphic>
```

For more information on `Graphic` methods and how to use them to create advanced interactions like selection or brushing, check out the [interactivity](/docs/concepts/interactivity) documentation.
