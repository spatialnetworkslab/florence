# Section

The `Section` is one of the cornerstones of `florence`. It is used to:

- define local coordinate systems
- apply coordinate transformations
- specify zooming and panning behavior
- enable interactions

```markup
<script>
  import { Graphic, Section } from '@snlab/florence'
</script>

<Graphic width={200} height={200} backgroundColor={'blue'}>

  <Section 
    x1={0.25}
    x2={0.75}
    y1={0.25}
    y2={0.75}
    backgroundColor={'green'}
  >
  
  </Section>

</Graphic>
```

```js exec
import SimpleExample from './examples/_SectionSimple.svelte'
```

<SimpleExample />

::: div callout
`Section`s can be nested, but a `Section` with a coordinate transformation (e.g. polar) can only contain `Mark`s and `Layer`s
:::

## Props

### Positioning

| Prop |        Required         |                 Types                  |   Default   |                       Unit(s)                        |
| ---- | ----------------------- | -------------------------------------- | ----------- | ---------------------------------------------------- |
| x1   | `if (x2 !== undefined)` | `Number`, `String`, `Date`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| x2   | `if (x1 !== undefined)` | `Number`, `String`, `Date`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| y1   | `if (y2 !== undefined)` | `Number`, `String`, `Date`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |
| y2   | `if (y1 !== undefined)` | `Number`, `String`, `Date`, `Function` | `undefined` | [Local coordinate](/docs/concepts/local-coordinates) |

It is possible to use the `Section` without providing any of the positioning props. This will result in the `Section` inheriting the extents of the parent `Section` or `Graphic`, taking padding into account. For example,

```markup
<Graphic width={500} height={500}>
  
  <Section padding={50}>
    
    <Section>

      ...

    </Section>

  </Section>

</Graphic>
```

is equivalent to

```markup
<Graphic width={500} height={500}>
  
  <Section
    x1={0}
    x2={1}
    y1={0}
    y2={1}
  >
    
    <Section
      x1={0.1}
      x2={0.9}
      y1={0.1}
      y2={0.9}
    >

      ...

    </Section>

  </Section>

</Graphic>
```

In the examples above, no local coordinate systems are being used, so everything is measured in screen pixels. However, if the parent `Graphic` or `Section` has specified a local coordinate system,
the positioning props would have to be defined in local coordinates. For example:

```markup
<Graphic
  width={500}
  height={500}
  scaleX={scaleLinear().domain([0, 10])}
  scaleY={scaleLinear().domain([0, 10])}
>

  <Section
    x1={1} x2={9}
    y1={1} y2={9}
  >

    ...

  </Section>

</Graphic>
```

would be equivalent to:

```markup
<Graphic
  width={500}
  height={500}
>

  <Section
    x1={50} x2={450}
    y1={50} y2={450}
  >

    ...

  </Section>

</Graphic>
```

### Aesthetics

|      Prop       | Required | Type(s)  |   Default   |            Units             |
| --------------- | -------- | -------- | ----------- | ---------------------------- |
| backgroundColor | `false`  | `String` | `undefined` | Named, hex, rgb or hsl color |

### Local coordinate system

|      Prop      | Required |      Type(s)       |   Default    |                  Unit(s)                   |
| -------------- | -------- | ------------------ | ------------ | ------------------------------------------ |
| scaleX         | `false`  | `Function`         | `undefined`  | [d3 scale](https://github.com/d3/d3-scale) |
| scaleY         | `false`  | `Function`         | `undefined`  | [d3 scale](https://github.com/d3/d3-scale) |
| transformation | `false`  | `String`           | `'identity'` | Should be either `'identity'` or `'polar'` |
| flipX          | `false`  | `Boolean`          | `false`      | -                                          |
| flipY          | `false`  | `Boolean`          | `false`      | -                                          |
| padding        | `false`  | `Number`, `Object` | `undefined`  | Pixel                                      |
| zoomIdentity   | `false`  | `Object`           | `undefined`  | -                                          |

For more how to use these props, see the [local coordinates](/docs/concepts/local-coordinates) documentation.

### Interactions

#### Mouse events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onClick     | `false`  | `Function` | `undefined` | -      |
| onMousedown | `false`  | `Function` | `undefined` | -      |
| onMouseup   | `false`  | `Function` | `undefined` | -      |
| onMouseover | `false`  | `Function` | `undefined` | -      |
| onMouseout  | `false`  | `Function` | `undefined` | -      |
| onMousedrag | `false`  | `Function` | `undefined` | -      |

#### Touch events

|    Prop     | Required |  Type(s)   |   Default   | Unit(s) |
| ----------- | -------- | ---------- | ----------- | ------- |
| onTouchdown | `false`  | `Function` | `undefined` | -      |
| onTouchup   | `false`  | `Function` | `undefined` | -      |
| onTouchover | `false`  | `Function` | `undefined` | -      |
| onTouchout  | `false`  | `Function` | `undefined` | -      |
| onTouchdrag | `false`  | `Function` | `undefined` | -      |

#### Select events

|    Prop    | Required |  Type(s)   |   Default   | Unit(s) |
| ---------- | -------- | ---------- | ----------- | ------- |
| onSelect   | `false`  | `Function` | `undefined` | -      |
| onDeselect | `false`  | `Function` | `undefined` | -      |

See the [interactivity](/docs/concepts/interactivity) documentation for more information.

### Other

|      Prop       | Required |  Type(s)  |   Default   |            Unit(s)            |
| --------------- | -------- | --------- | ----------- | ----------------------------- |
| blockReindexing | `false`  | `Boolean` | `false`     | -                             |
| clip            | `false`  | `String`  | `'padding'` | Either `'padding' or 'outer'` |

The purpose of `blockReindexing` is explained in the [interactivity](/docs/concepts/interactivity) documentation. `clip` controls how the marks, layers and other visual elements inside of this `Section` should be clipped off. To clip off everything within the padding, `'padding'` should be used. To only clip off everything outside of the `Sections`'s outer border (determined by the positioning props), `'outer'` should be used.

## Methods

- `selectRectangle`
- `updateSelectRectangle`
- `resetSelectRectangle`
- `startSelectPolygon`
- `addPointToSelectPolygon`
- `moveSelectPolygon`
- `resetSelectPolygon`

`Section` methods can be used as follows:

```markup
<script>
  let section
  section.selectRectangle(...)
</script>

<Section bind:this={section}>

</Section>
```

For more information on `Section` methods and how to use them to create advanced interactions like selection or brushing, check out the [interactivity](/docs/concepts/interactivity) documentation.
