<script>
import { onMount } from 'svelte';
import { scaleLinear, scaleBand } from "d3-scale";
import { Graphic, Section, RectangleLayer } from "@snlab/florence";
import Grid from "./utils/_Grid.svelte"


let columns = 1
let rows = 1
let rowGap = 50
let columnGap = 0
const range = 0
const width = 1200
const height = 600
const padding = { top: 20, bottom: 30, left: 40, right: 30 }

</script>

# Grid
___



```html
<Grid>

  ...

</Grid>
```

The `Grid` component can help you parition `Section` (s) into a grid-like formation.


::: codesandboxplus ./src/gallery/colored-scatterplot/App.svelte 42-64
:::


## Props
___ 

### Positioning

| Prop             | Type(s)   | Required | Default | Units         | Description |
| ---------------- | --------- | -------- | ------- | ------------- | ------------|
| x1               | `Number`  | ✅        |         | screen pixels | Adjust Grid x1 |
| x2               | `Number`  | ✅        |         | screen pixels | Adjust Grid x2 |
| y1               | `Number`  | ✅        |         | screen pixels | Adjust Grid y1 |
| y2               | `Number`  | ✅        |         | screen pixels | Adjust Grid y2 |

The `Grid` positioning props work the same way as the [Section](/docs/02-section#positioning)
positioning props.


### Grid settings

| Prop             | Type(s)   | Required | Default | Units         | Description |                 
| ---------------- | --------- | -------- | ------- | ------------- | ----------- | 
| rows             | `Number`  | ✅        | `1`     | Integer       | Number of rows in grid |
| columns          | `Number`  | ✅        | `1`     | Integer       | Number of columns in grid |
| rowGap           | `Number`  | ✅        | `0`     | Integer       | Margin between rows |
| columnGap        | `Number`  | ✅        | `0`     | Integer       | Margin between columns |
| areaNames        | []`String`  | ✅      | [] |               | An array of facet names |


### Other

| Prop             | Type(s)   | Required | Default | Units         | Description                       | Try                                                       |
| ---------------- | --------- | -------- | ------- | ------------- | --------------------------------- | --------------------------------------------------------- |
| viewGridTemplate | `Boolean` |          | `false` |               | Option to console log grid layout | <button>Toggle</button>                                   |
| viewGridShape    | `Boolean` |          | `false` |               | Option to console log grid layout | <button>Toggle</button>                                   |


### Slot Scope

Grid expose a slot scope `cells` which stored an array of key-value pair in which key is area name element in `areaNames` array and value is potision object.

```svelte
{
  "plot-1":{
    x1,
    y1,
    x2,
    y2
  },
  "plot-2":{
    x1,
    y1,
    x2,
    y2
  },
  ....
}
```

The idea of slots can be found [here](https://svelte.dev/tutorial/slots)


## Examples
___

Below example demonstrate use of `Grid` component to create facet views.
Faceting makes it easy to create small multiples of different subsets of an entire dataset.
Faceting is a powerful tool when investigating whether patterns are the same or different across conditions.

<Grid {width} {height} {columns} {rows} {rowGap} {columnGap} />


## Code
___

The `Grid` implementation can be found at [Github](https://github.com/spatialnetworkslab/florence/blob/master/src/components/Core/Grid/Grid.svelte).

<style>
a {
  font-weight: 500;
  color: #ed8936 !important;
}

a:hover {
  text-decoration: underline !important;
}

li {
  list-style-type: disc;
  list-style-position: inside;
	position: relative;
	margin-bottom: 1em;
}

li:after {
	position: absolute;
	display: inline-block;
	width: 22px;
	height: 22px;
	margin-right: 0.5em;
	background-color: #B53C2C;
	border-radius: 50%;
}

h2, h3, h4, h5, h6 {
  margin-top: 1.5em;
}
</style> 