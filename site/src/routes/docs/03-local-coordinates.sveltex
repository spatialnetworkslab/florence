# Local coordinates

## Description

Understanding how local coordinates work is key to understanding `florence`.
The `Graphic` and `Section` components can create local coordinate systems,
while all other components are affected by local coordinate systems.

## Creating local coordinate systems

As stated above, local coordinate systems are created with the `Graphic` and `Section`
components. The following props are used to create local coordinate systems:

|      Prop      | Component |      Type(s)       | Required |   Default   |     Units     |
| -------------- | --------- | ------------------ | -------- | ----------- | ------------- |
| padding        | Both      | `Number`, `Object` | no       | `0`         | screen pixels |
| scaleX         | Both      | `Function`         | no       | `undefined` |               |
| scaleY         | Both      | `Function`         | no       | `undefined` |               |
| flipX          | Both      | `Boolean`          | no       | `false`     |               |
| flipY          | Both      | `Boolean`          | no       | `false`     |               |
| zoomIdentity   | `Section` | `Object`           | no       | `undefined` |               |
| transformation | `Section` | `String`           | no       | `undefined` |               |

As you can see, the `Section` has a few options that the `Graphic` does not have.
All these props will now be discussed in detail.

### Padding

...

`padding` can be either a `Number` or an `Object` with the following structure:

```js
{
  left: <Number>,
  right: <Number>,
  bottom: <Number>,
  top: <Number>
}
```

### scaleX and scaleY

`scaleX` and `scaleY` can be used to create a local coordinate system
inside of the `Graphic` or `Section`:

```html
<script>
  import { scaleLinear } from 'd3-scale'
  import { Graphic, Point } from 'florence'
</script>

<Graphic
  width={200} height={200}
  scaleX={scaleLinear().domain([0, 1])}
  scaleY={scaleLinear().domain([0, 1])}
>

  <!-- This point will be in the center of the graphic -->
  <Point x={0.5} y={0.5} />

</Graphic>
```

Throughout the documentation, [d3 scales](https://github.com/d3/d3-scale) like `scaleLinear`,
`scaleBand` and `scalePoint` will be passed to `scaleX` and `scaleY`. It is also possible 
to use your own scale functions. But note that some functionalities (like interactions) 
require the function to have an `invert` method. (`scaleBand` and `scalePoint` do not have 
`invert` methods, but `florence` will add them internally). So, if you want to use
arbitrary scale functions without breaking `florence`, make sure to add an `.invert` method to
your scale:

```html
<script>
  const myCustomScale = x => x * 2
  myCustomScale.invert = x => x / 2
</script>

<Section scaleX={myCustomScale}>
  ...
```

### flipX and flipY

`flipX` and `flipY` can be used to invert the coordinate system:

```html
<Graphic width={200} height={200} flipY>

  <!-- This point will be at the bottom of the graphic -->
  <Point x={100} y={0} />

</Graphic>
```

### zoomIdentity

TODO

### transformation

TODO

## Inside a local coordinate system

### Nesting coordinate systems

TODO

### Function syntax

TODO

## Examples
