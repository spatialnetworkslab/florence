# Local coordinates

## Description

Understanding how local coordinates work is key to understanding `florence`.
The `Graphic` and `Section` components can create local coordinate systems,
while all other components are affected by local coordinate systems.

## Creating local coordinate systems

As stated above, local coordinate systems are created with the `Graphic` and `Section`
components. The following props are used to create local coordinate systems:

|      Prop      | Component |      Type(s)       | Required |   Default   |     Units     |
| -------------- | --------- | ------------------ | -------- | ----------- | ------------- |
| padding        | Both      | `Number`, `Object` | no       | `0`         | screen pixels |
| scaleX         | Both      | `Function`         | no       | `undefined` |               |
| scaleY         | Both      | `Function`         | no       | `undefined` |               |
| flipX          | Both      | `Boolean`          | no       | `false`     |               |
| flipY          | Both      | `Boolean`          | no       | `false`     |               |
| zoomIdentity   | `Section` | `Object`           | no       | `undefined` |               |
| transformation | `Section` | `String`           | no       | `undefined` |               |

As you can see, the `Section` has a few options that the `Graphic` does not have.
All these props will now be discussed in detail.

### Padding

`padding` can be either a `Number` or an `Object` with the following structure:

```js
{
  left: <Number>,
  right: <Number>,
  bottom: <Number>,
  top: <Number>
}
```

Try changing the 'Padding' slider in the following example.
Note that `Section` components clip everything outside of their boundaries.

```html
<script>
  import { Graphic, Section, Point } from '../../../../src'
  let padding = 0
</script>

<label for="padding-slider">Padding: {padding}</label>
<input type="range" min="0" max="50" bind:value={padding} name="padding-slider" />
<br />

<Graphic width={300} height={300}>

  <Section x1={50} x2={250} y1={50} y2={250} {padding}>
  
    <Point x={50} y={50} />
    <Point x={150} y={150} />
    <Point x={250} y={250} />

  </Section>

</Graphic>
```

```js exec
import Padding from './doc-examples/Padding.svelte'
```

<Padding />

### scaleX and scaleY

`scaleX` and `scaleY` can be used to create a local coordinate system
inside of the `Graphic` or `Section`:

```html
<script>
  import { scaleLinear } from 'd3-scale'
  import { Graphic, Point } from 'florence'
</script>

<Graphic
  width={200} height={200}
  scaleX={scaleLinear().domain([0, 1])}
  scaleY={scaleLinear().domain([0, 1])}
>

  <!-- This point will be in the center of the graphic -->
  <Point x={0.5} y={0.5} />

</Graphic>
```

It is also possible to use non-numeric domains, as long as your scale can handle them:

```html
<script>
  import { scalePoint, scaleLinear } from 'd3-scale'
  import { Graphic, Section, Rectangle } from 'florence'
</script>

<Graphic width={200} height={200} padding={10}>

  <Section
    scaleX={scalePoint().domain(['a', 'b', 'c'])}
    scaleY={scaleLinear().domain([0, 1])}
  >

    <Rectangle 
      x1={'a'} x2={'c'}
      y1={0} y2={0.5}
    />

    <XAxis />
    <YAxis />
  
  </Section>

</Graphic>
```

```js exec
import NonNumericDomains from './doc-examples/NonNumericDomains.svelte'
```

<NonNumericDomains />

Throughout the documentation, [d3 scales](https://github.com/d3/d3-scale) like `scaleLinear`,
`scaleBand` and `scalePoint` will be passed to `scaleX` and `scaleY`. It is also possible 
to use your own scale functions. But note that some functionalities (like interactions) 
require the function to have an `invert` method. (`scaleBand` and `scalePoint` do not have 
`invert` methods, but `florence` will add them internally). So, if you want to use
arbitrary scale functions without breaking `florence`, make sure to add an `.invert` method to
your scale:

```html
<script>
  const myCustomScale = x => x * 2
  myCustomScale.invert = x => x / 2
</script>

<Section scaleX={myCustomScale}>
  ...
```

Note that using `XAxis` and `YAxis` without providing any props, like in the non-numeric domain example 
above, is only possible if your scale either has a `.ticks` or a `.domain` method. If your scale doesn't, 
make sure to provide an `Array` of `tickValues` to the axis (see [Axes documentation](/docs/06-axes)).

### flipX and flipY

`flipX` and `flipY` can be used to invert the coordinate system:

```html
<Graphic width={200} height={200} flipY>

  <!-- This point will be at the bottom of the graphic -->
  <Point x={100} y={0} />

</Graphic>
```

### zoomIdentity

The `zoomIdentity` prop takes an `Object` with the following structure:

```js
{
  x: <Number>,
  y: <Number>,
  kx: <Number>,
  ky: <Number>
}
```

where `x` is the translation to the right in screen pixels, `y` the translation down in screen pixels,
`kx` the magnification factor in the x dimension and `ky` the magnification factor in the y dimension.
The identity transformation is `{ x: 0, y: 0, kx: 1, ky: 1 }`. Using `zoomIdentity` will zoom and/or pan
everything inside of the `Section`.

With `zoomIdentity` it is possible to zoom/pan programmatically, or on user interaction- see the
[zooming and panning documentation](/docs/05-zooming-panning) for more information.

### transformation

The `transformation` prop can only accept two values right now:
- `'identity'`
- `'polar'`

where `'identity'` does nothing, and `'polar'` results in a polar transformation.
`transformation` can be freely used in combination with `zoomIdentity`, `scaleX` and `scaleY`.
The only caveat is that inside of a `Section` that has a `transformation`, it is not allowed
to use anything other than marks, layers and axes. An example:

```html
<script>
  import { scalePoint, scaleLinear } from 'd3-scale'
  import { Graphic, Section, Rectangle, XAxis, YAxis } from '../../../../../src'
</script>

<Graphic width={500} height={500}>

  <Section
    scaleX={scalePoint().domain(['a', 'b', 'c'])}
    scaleY={scaleLinear().domain([0, 1])}
    transformation="polar"
  >

    <Rectangle x1={'a'} x2={'b'} y1={0} y2={0.75} fill="blue" />
    <Rectangle x1={'b'} x2={'c'} y1={0.25} y2={1} fill="red" />
  
  </Section>

</Graphic>
```

```js exec
import Polar from './doc-examples/Polar.svelte'
```

<Polar />

## Inside a local coordinate system

### Nesting coordinate systems

TODO

### Function syntax

TODO

## Examples

TODO