# Creating Basic Graphs

The Florence library comes with a range of components that can be used to compose common graph types easily. Generally, most graphs use the following components:

- The [Graphic](docs/core/graphic)
- The [Section](docs/core/section)
- A selection of the available `Mark`s / `Layer`s
- Axes

Graphs can be further customized with the following components:

- The [Label](docs/marks/label), to make annotations or as a title
- The [DiscreteLegend](docs/guides/discrete-legend) and [GradientLegend](docs/guides/gradient-legend) components
- The [XGridLines](docs/guides/xgridlines) and [YGridLines](docs/guides/ygridlines) components

In addition, pretty much every graphic will need scales, for which we rely on [d3 scales](https://github.com/d3/d3-scale).

## ⭐️Learning Goal(s)

In this tutorial, you will make a map of a basic dot plot (along with some optional customisations) of the fruit-diameter dataset below.

## Dataset

|   fruit    | diameter |     |   fruit    | diameter |
| ---------- | -------- | --- | ---------- | -------- |
| lime       | 4.7      |     | lime       | 4.7      |
| lemon      | 6.1      |     | grapefruit | 8.8      |
| grapefruit | 7.9      |     | pomelo     | 12.5     |
| lemon      | 6.6      |     | grapefruit | 12.7     |
| orange     | 6.7      |     | grapefruit | 8.6      |
| lemon      | 5.3      |     | pomelo     | 13.1     |
| pomelo     | 11.6     |     | lime       | 5.8      |
| grapefruit | 11.1     |     | orange     | 8.9      |
| lime       | 5.5      |     | grapefruit | 9.1      |
| pomelo     | 10.6     |     | pomelo     | 10.3     |
| lemon      | 6.4      |     | grapefruit | 9.4      |

## Loading the dataset

When working with `florence`, in most cases it is recommended to use the sidecar [florence-datacontainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) library, which exports a `DataContainer` class. The two most common data formats that can be loaded to the `DataContainer` are column-oriented and row-oriented data.

Row-oriented data takes the form of an array of objects. For example, in row-oriented format, the dataset above would look something like this:

```js
[
  { fruit: 'lime', diameter: 4.7 },
  { fruit: 'lemon', diameter: 6.1 }
  ...
]
```

Data in column-oriented format, on the other hand, takes the form of a single object of columns represented as `Array`s, like so:

```js
{
  fruit: ['lime', 'lemon', ...],
  diameter: [4.7, 6.1, ...]
}
```

**Passing in data by column is the preferred format as it reduces the amount of pre-processing needed.** The dataset above in column-oriented format looks as follows:

```markup
<script>
  const data = {
    diameter: [
      4.7, 6.1, 7.9, 6.6, 6.7, 5.3, 11.6, 11.1, 5.5, 10.6, 6.4,
      4.9, 8.8, 12.5, 12.7, 8.6, 13.1, 5.8, 8.9, 9.1, 10.3, 9.4, 10.1
    ],
  
    fruit: [
      'lime', 'lemon', 'grapefruit', 'lemon', 'orange', 'lemon', 
      'pomelo', 'grapefruit', 'lime', 'pomelo', 'lemon',
      'lime', 'grapefruit', 'pomelo', 'grapefruit', 'grapefruit',
      'pomelo', 'lime', 'orange', 'grapefruit', 'pomelo', 
      'grapefruit', 'anchovies'
    ]
  }
</script>
```

We will load this data to the `DataContainer`:

```markup
<script>
  import DataContainer from '@snlab/florence-datacontainer'

  const data = {
    diameter: [
      4.7, 6.1, 7.9, 6.6, 6.7, 5.3, 11.6, 11.1, 5.5, 10.6, 6.4,
      4.9, 8.8, 12.5, 12.7, 8.6, 13.1, 5.8, 8.9, 9.1, 10.3, 9.4, 10.1
    ],
  
    fruit: [
      'lime', 'lemon', 'grapefruit', 'lemon', 'orange', 'lemon', 
      'pomelo', 'grapefruit', 'lime', 'pomelo', 'lemon',
      'lime', 'grapefruit', 'pomelo', 'grapefruit', 'grapefruit',
      'pomelo', 'lime', 'orange', 'grapefruit', 'pomelo', 
      'grapefruit', 'anchovies'
    ]
  }

  const dataContainer = new DataContainer(data)
    .filter(row => row.fruit !== 'anchovies') // filters out unwanted values
    .groupBy('fruit') // groups data by common categorical values
    .summarise({ meanQuantity: { diameter: 'mean' } }) // computes mean diameter per group
    .arrange({ meanQuantity: 'descending' }) // sorts data by mean quantity, in descending order
</script>
```

For further details on data loading and formatting using `DataContainer`, refer to its [documentation](https://gitlab.com/spatialnetworkslab/florence-datacontainer).

## Graphic

The [Graphic](docs/core/graphic) component forms the basis of all Florence graphics, including ours. We will give our graphic a `width` and `height` of 500 pixels:

```markup
<script>
  import { Graphic } from '@snlab/florence'
  ...
</script>

<Graphic width={500} height={500}>

</Graphic>
```

## Section

The `Section` component divides the `Graphic` (or canvas) up into subsections. Each subsection can contain its own graph with its own marks, axes etc. While this could also be accomplished by creating multiple `Graphic`s, it is often more convenient to use multiple `Section`s inside a single `Graphic`, because this allows you to use `florence`s coordinate systems to position the various subsections of the graph. Another reason for using `Section`s is when you want to use multiple types of coordinate systems within a single graphic, which is the main reason for using a `Section` in this tutorial.

We will declare a single `Section` like so:

```markup
<script>
  import { Graphic, Section } from '@snlab/florence'
  ...
</script>

<Graphic width={500} height={500}>

  <Section
    x1={50} x2={450}
    y1={50} y2={450}
  >

  </Section>

</Graphic>
```

For further details on `Section`, refer to its [documentation](docs/core/section).

## Scales

In our example, let's say we'd like to plot the column `fruit` to the x-axis, and `diameter` to the y-axis.

Considering that the x value of each point we'd like to plot is some fruit name, it makes no sense to position the corresponding point at x coordinate 'lemon' or 'grapefruit' if these values are not first scaled to a reasonable screen coordinate in pixels. 

If we think of the `Section` as our chart plotting space, this means we need to apply scaling such that the x-axis of the `Section` plots fruits (categorical values), and the y-axis plots diameter (continuous values) in pixel space. This means we need to add scales, one for X (`scaleX`) and one for Y (`scaleY`), to our `Section`.

We will create our scales in the `<script>` section of the component:

```markup
<script>
  import DataContainer from '@snlab/florence-datacontainer'
  import { scalePoint, scaleLinear } from 'd3-scale'

  const data = {
  ...

  const fruitDomain = dataContainer.domain('fruit')
  const scaleFruit = scalePoint().domain(fruitDomain).padding(0.2)
  const meanDiameterDomain = [0, dataContainer.max('meanDiameter') * 1.5]
  const scaleMeanDiameter = scaleLinear().domain(meanDiameterDomain)
</script>
```

We then use our scales as input to `scaleX, scaleY` of Section.

```markup
<Graphic 
  width={500} height={500}
>
  <Section
    x1={50} x2={450}
    y1={50} y2={450}
    scaleX={scaleFruit}
    scaleY={scaleMeanDiameter}
  >

  </Section>

</Graphic>
```

We can also directly create scales as inputs. 

```markup
<Graphic 
  width={500} height={500}
>
  <Section
    x1={50} x2={450}
    y1={50} y2={450}
    padding={40}
    scaleX={scalePoint().domain(fruitDomain).padding(0.2)}
    scaleY={scaleLinear().domain(meanDiameterDomain)}
  >

  </Section>

</Graphic>
```

For further details on d3-scales, refer to the [documentation](https://github.com/d3/d3-scale).

## Marks

In order to actually render one point per row in the dataset, we need to specify our chosen mark. Since we are plotting multiple points in this example, the `PointLayer` component is sufficient for our purposes. However, there are a wide range of marks that are available. For details of each, refer to the Marks section of the documentation.

```markup
<Graphic 
  width={500} height={500}
>
  <Section
    x1={50} x2={450}
    y1={50} y2={450}
    padding={40}
    scaleX={scalePoint().domain(fruitDomain).padding(0.2)}
    scaleY={scaleLinear().domain(meanDiameterDomain)}
  >
      <PointLayer
      x={data.column('fruit')}
      y={data.column('diameter')}
      key={data.column('$key')}
      fill={scaleFruitColor}
      radius={test}
    />
  </Section>

</Graphic>
```

::: div callout
If we are plotting only a single point, we would use `Point`.
:::

Note that the `PointLayer` component requires the x and y properties to be specified. This tells the component which data variable to use as the x and y coordinates of each point. As such, we specify these to be `data.column('fruit')` and `data.column('diameter')`, respectively.

::: div callout
Since we have already specified the scale values in `Section`, our raw values will now be scaled to screen coordinates.
:::


The graph should now look like this:
<!-- TODO replace with codeboxes -->
```js exec
import Basic from './utils/_Basic.svelte'
```

<Basic switch0 />

## Axes
Axes are always good to include as a reference for viewers to read specific values on the graph.

Axes are added by using the `XAxis` and `YAxis` components. They immediately take on the values of the scales specified by your `Section` component, or revert to smart defaults (0 to 1).

We also add padding to `Section` so that the axis labels have some room to show up.

```markup
<Graphic 
  width={500} height={500}
>

  <Section
    x1={50} x2={450}
    y1={50} y2={450}
    padding={40}
    scaleX={scaleFruit}
    scaleY={scaleMeanDiameter}
  >

    <PointLayer
      x={data.column('fruit')}
      y={data.column('diameter')}
      key={data.column('$key')}
    />

    <XAxis
    />
    <YAxis 
    />
  </Section>

</Graphic>
```

The graph should now look like this:
<!-- TODO replace with codeboxes -->

<Basic switch0 switch1 />

## Plot Title (Optional)

Graphs usually come with titles describing the subject of the graph. This can be added using the `Label` component.

<Basic switch0 switch1 switch2 />

```markup
<Graphic 
  width={500} height={500}
>

  <Section
    x1={50} x2={450}
    y1={50} y2={450}
    padding={40}
    scaleX={scaleFruit}
    scaleY={scaleMeanDiameter}
  >

    <PointLayer
      x={data.column('fruit')}
      y={data.column('diameter')}
      key={data.column('$key')}
    />

    <XAxis
    />
    <YAxis 
    />

    <Label
      x={() => 250}
      y={() => 70}
      text={'Fruit Sizes'}
      fontFamily={'Baskerville'}
      fontSize={18}
    />
  </Section>
</Graphic>

```

## Adding scales to marks (Optional)
We have briefly discussed the necessity of scales in the part on `Section` above. Scales are necessary for converting raw values in the dataset (e.g. fruit name) into values that can be rendered on a screen (e.g. pixels).

However, scaling is not limited to changing data values into screen coordinates/pixels. Scaling can be done for a wide range of appearance aesthetics, such as color, shape and opacity. Different marks allow different aesthetics to be scaled. For details of each, refer to the Marks and Scales documentation.

In this case, the points on the graph can be scaled to display a different color for each category of fruit, or a different radius for its diameter. To do so, the `fill` property on the `PointLayer` component can be changed from a single color to a scale, similar to the x and y properties. The same can be done to the `radius` property.

<!-- TODO replace with codeboxes -->

<Basic switch1 switch2 switch3 />

```markup
<Graphic 
  width={500} height={500}
>

  <Section
    x1={50} x2={450}
    y1={50} y2={450}
    padding={40}
    scaleX={scaleFruit}
    scaleY={scaleMeanDiameter}
  >

    <PointLayer
      x={data.column('fruit')}
      y={data.column('diameter')}
      key={data.column('$key')}
      fill={data.column('fruit').map(d => scaleFruitColor(d))}
      radius={scaleLinear().domain(meanDiameterDomain).range([2, 10])}
    />

    <XAxis
    />
    <YAxis 
    />

    <Label
      x={() => 250}
      y={() => 70}
      text={'Fruit Sizes'}
      fontFamily={'Baskerville'}
      fontSize={18}
    />
  </Section>
</Graphic>

```

Note that there is an extra type: `schemeCategory10` specification passed to the scale. This simply tells the mark to use the 'category10' color scheme. This is one of [many predefined color schemes from d3](https://github.com/d3/d3-scale-chromatic). However, do note that certain color schemes can only be used with categorical variables/certain scale types, while others can only be used with numerical variables. 


## Axis Title (Optional)
Similar to the plot title, titles can be added to the axes for additional readability. This can be specified as properties of the `XAxis` and `YAxis` components.

<Basic switch2 switch3 switch4 />

The title-vjust and title-hjust properties are used to position the axis title relative to the vertical and horizontal size of the axis.

<!-- TODO replace with codeboxes -->

```markup
  <Graphic 
    width={500} height={500}
  >

    <Section
      x1={50} x2={450}
      y1={50} y2={450}
      padding={40}
      scaleX={scaleFruit}
      scaleY={scaleMeanDiameter}
    >

      <PointLayer
        x={data.column('fruit')}
        y={data.column('diameter')}
        key={data.column('$key')}
        fill={data.column('fruit').map(d => scaleFruitColor(d))}
        radius={scaleLinear().domain(meanDiameterDomain).range([2, 10])}
      />

      <XAxis
        title={'fruit'}
      />
      <YAxis 
        title={'diameter/cm'}
      />
      <Label
        x={() => 250}
        y={() => 70}
        text={'Fruit Sizes'}
        fontFamily={'Baskerville'}
        fontSize={18}
      />
    </Section>
  </Graphic>


```
