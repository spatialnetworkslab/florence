# Creating Simple Choropleth Maps

Although the act of map making (cartography!) has much older roots than the concept of the 'grammar of graphics', the two are very much compatible. With some extensions, the grammar of graphics can also be used to create maps of any kind. 

`florence`'s coordinate systems and components support geospatial visualisations like maps. In combination with the [DataContainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) and [proj4](https://github.com/proj4js/proj4js), it furthermore supports pretty much any coordinate system used around the world. In this tutorial, you will learn how to construct a map that encodes data through color– a choropleth– using GeoJSON data.

## ⭐️Learning Goal(s)

In this tutorial, you will make a map of average resale prices in different planning areas of Singapore. You will use the following components:

- The [Graphic](docs/core/graphic)
- The [Section](docs/core/section)
- The [PolygonLayer](docs/marks/Polygon)
- The [createGeoScales](/docs/helpers/createGeoScales) helper function
- The [Label](docs/marks/label), to make a title
- The [DiscreteLegend](docs/guides/legend)

To manage our data, we will use the [DataContainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) library.

## What data do we need?

Spatial data can be understood as a combination of spatial 'geometries' with non-spatial attributes. For example, a dataset of shops might consist of a set of pairs of cartesian or longitude-latitude coordinates (spatial geometries), and a complementary set of attributes like the names of shops and opening hours (non-spatial attributes). In online mapping, [GeoJSON](geojson.org) is the defacto standard to store spatial data. It is an extension (subset) of regular JSON that follows specific rules. In GeoJSON, a point might represented like this:

``` js
{
  type: 'Feature',
  geometry: {
    type: 'Point',
    coordinates: [125.6, 10.1]
  },
  properties: {
    name: 'Dinagat Islands'
  }
}
```

A 'Feature' has two additional keys: `geometry`, holding information about the spatial geometry; and `properties`, holding any additional non-spatial attributes. `florence` and the [DataContainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) can work with GeoJSON out of the box.

## Importing and preparing the dataset

For this tutorial, we import a GeoJSON file of Singapore's planning areas and mean resale prices per square meter from the Housing & Development Board. Let's get started by making it available to our Svelte component. 

```js
import { geojson } from './planning_areas_data.js' 
```

Next, we will load this file to the `DataContainer`:

```js
const convertNullToUndefined = value => value === null ? undefined : value

const dataContainer = new DataContainer(geojson)
  .mutate({ resale_price_sqm: r => convertNullToUndefined(r.resale_price_sqm) })
```

Note that directly after loading the geojson data into a `DataContainer`, we use the [mutate](https://gitlab.com/spatialnetworkslab/florence-datacontainer#datacontainer_mutate) method. What that line of code does is take all values in the `resale_price_sqm` column that are `null` (missing), and convert them to `undefined`. The reason for this will become clear later!

For further details on loading data to the `DataContainer`, refer to its [documentation](https://gitlab.com/spatialnetworkslab/florence-datacontainer).

## Creating geospatial scales

In the case of maps, some data may be recorded in three-dimensional 'earth' coordinates (like longitude/latitude) while in other cases data might already be pre-projected in a two-dimensional plane for you. In both cases, you still need to translate the spatial coordinates to pixel (screen) coordinates.

When dealing with geodata, we can't treat the x and y dimension as separate, but must take them into account together- otherwise we will loose the aspect ratio between the x and y dimensions, and our map will look stretched. We can accomplish this with a helper function that `florence` exports called [createGeoScales](/docs/helpers/create-geo-scales), that uses the [bounding box](https://en.wikipedia.org/wiki/Minimum_bounding_box) of our GeoJSON geometries to create the correct scales. We can calculate the bounding box simply by using the [bbox](https://gitlab.com/spatialnetworkslab/florence-datacontainer#datacontainer_bbox) method of the `DataContainer`. The function then returns an object with a `scaleX` and `scaleY` key that we can pass to the `Section`'s `scaleX` and `scaleY`.

Our code now looks like this:

```markup
<script>
  import { createGeoScales } from '@snlab/florence'
  import DataContainer from '@snlab/florence-datacontainer'

  // import data
  import { geojson } from '../data/planning_areas.js'

  // load data to DataContainer
  const convertNullToUndefined = value => value === null ? undefined : value

  const dataContainer = new DataContainer(geojson)
    .mutate({ resale_price_sqm: r => convertNullToUndefined(r.resale_price_sqm) })

  // create geo scales
  const geoScales = createGeoScales(data.bbox())
</script>
```

## Seting up our 'canvas' for mapping

We are now ready to set up our 'canvas' for creating our map with the [Graphic](docs/core/graphic) and [Section](docs/core/section) components. After specifying the width and height of the `Graphic` (which creates an empty svg of the given width and height), we use the `geoScales` variable from our previous step to set the `scaleX` and `scaleY` of the `Section`. To make our code more concise, we will use the [spread](https://svelte.dev/docs#Attributes_and_props) syntax for this.

```markup
<script>
  import { Graphic, Section, createGeoScales } from '@snlab/florence'
  ...
</script>

<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    flipY
  >

  </Section>

</Graphic>
```

Note that (as in the [basic](/tutorials/basic) tutorial) we need to use the `flipY` prop of the `Section` to make our coordinate system go from bottom to top, instead of top to bottom.

## Drawing the map

Next, we have to draw the actual polygons: one for each planning area. Instead of setting the `x` and `y` properties separately like usual, we use the `geometry` of the `PolygonLayer` instead. The `geometry` prop expects a GeoJSON geometry of type `'Polygon'`. For more information on the `geometry` prop, please refer to the [PolygonLayer documentation](docs/marks/polygon).

::: div callout
If we were plotting only a single polygon, we would use the `Polygon` mark instead of the `PolygonLayer`.
:::

```markup
<script>
  import { Graphic, Section, PolygonLayer, createGeoScales } from '@snlab/florence'
  ...
</script>

<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    flipY
  >

    <PolygonLayer geometry={dataContainer.column('$geometry')} />

  </Section>

</Graphic>
```

Too make our map look more appealing, will pass appropriate values to aesthetic properties like `fill`, `stroke`, and `strokeWidth`:

```markup
...

<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    flipY
  >
    <!-- step 1 -->
    <PolygonLayer 
      geometry={data.column('$geometry')}
      fill={'#d3d3d3'} 
      stroke={'white'} 
      strokeWidth={1}
    />

  </Section>

</Graphic>
```

Our map now looks like this:

```js exec
import Choropleth from './utils/_Choropleth.svelte'
```

<Choropleth />

## Turning our map into a choropleth

That was not too hard! Now we take it a step further and add colors to the polygons to reflect variable in our dataset— in other words, we turn our map into a choropleth map. First, we are going to pick a set of colors for our polygons. In the [basic](/tutorials/basic) tutorial, we used a predefined color scheme from [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic), but in this tutorial we will create own color scheme to demonstrate how easy that is.

```js
const COLORS = ['#fff0d2', '#FDD1A5', '#FD9243', '#982f05', '#4e1802']
```

The variable we want to map to this color scheme is the `resale_price_sqm` variable in our `DataContainer`. Like in the basic tutorial, we do this using a scale. We need a scale that maps a continuous / quantitative domain (the price per square meter) to a categorical range (a set of colors). For this, we will have to create a 'classification scheme', that divides the observed price data in a set of classes, which we can then link to the colors. For example, if our `resale_price_sqm` would contain the values `[1, 2, 3, 4]`, and we wanted to create two classes, it would make sense to put the numbers `[1, 2]` in a class, and the numbers `[3, 4]` in a class. We could then say that all numbers in the first class should light-blue, and all numbers in the second class dark-blue.

We can do all of this automatically with the `DataContainer`'s [classify](https://gitlab.com/spatialnetworkslab/florence-datacontainer#datacontainer_classify) method:

```js
const priceColorScale = dataContainer
  .dropNA('resale_price_sqm')
  .classify(
    { column: 'resale_price_sqm', method: 'EqualInterval', numClasses: 5 },
    COLORS
  )
  .unknown('#d3d3d3')
```

Before calling `classify`, we first remove the missing (`undefined`) values from the `resale_price_sqm` column. Next, we divide the `resale_price_sqm` column into `5` classes using the `EqualInterval` method for determining the class boundaries. We then assign a color from the previously defined `COLORS` variable to each class. The `classify` method returns a [d3 threshold scale](https://github.com/d3/d3-scale#threshold-scales). We then tell the scale that if it encounters 'unknown' values, like `undefined` or `NaN`, it should return a gray-ish color (`'#d3d3d3'`). This is why we had to convert our `null` values to `undefined` earlier: `null` values are interpreted by the scale as `0`, not as missing/unknown!

In summary, the part of our code between `<script>` should now look like this:

```js
  import { Graphic, Section, PolygonLayer, createGeoScales } from '@snlab/florence'
  import DataContainer from '@snlab/florence-datacontainer'
  import { geojson } from './planning_areas_data.js'

  const convertNullToUndefined = value => value === null ? undefined : value

  const dataContainer = new DataContainer(geojson)
    .mutate({ resale_price_sqm: r => convertNullToUndefined(r.resale_price_sqm) })

  const geoScales = createGeoScales(dataContainer.bbox())

  const COLORS = ['#fff0d2', '#FDD1A5', '#FD9243', '#982f05', '#4e1802']

  const priceColorScale = dataContainer
    .dropNA('resale_price_sqm')
    .classify(
      { column: 'resale_price_sqm', method: 'EqualInterval', numClasses: 5 },
      COLORS
    )
    .unknown('#d3d3d3')
```

### Adding colors to the polygons

The last thing we need to do is assign the colors to the `PolygonLayer`'s `fill` prop. Just replace the input to `fill` with `dataContainer.map('resale_price_sqm', priceColorScale)` and _voila_! Our simple map of Singapore is now a choropleth map that shows us each planning area's mean HDB flat resale price per square meter.

```markup
...

  <PolygonLayer 
    geometry={dataContainer.column('$geometry')}
    fill={dataContainer.map('resale_price_sqm', priceColorScale)}
    stroke={'white'} 
    strokeWidth={1}
  />

...
```

<Choropleth switchColor />

## Plot Title

Graphics, including maps, usually come with titles describing the subject of the graph. We can add a title using the [Label](/docs/marks/label) component. Like in the basic tutorial, we will position the title in the `Graphic`'s coordinate system.

```markup
<script>
  import { 
    Graphic, Section, PolygonLayer, createGeoScales, Label
  } from '@snlab/florence'
  ...
</script>

<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    padding={30}
    flipY
  >
    
    ...

  </Section>

  <Label
    x={250}
    y={70}
    text={'Mean resale price per m2 (S$)'}
    fontFamily={'Montserrat'}
    fontSize={18}
  />

</Graphic>
```

<Choropleth switchColor switchTitle />

## Legend

For the final touch, we will add a legend to our plot to make it easier to understand what the colors mean. Since we are using a set of discrete colors (as opposed to a color gradient) we will use the [DiscreteLegend](/docs/guides/discrete-legend) component.

The `DiscreteLegend` component requires us to specify an `Array` of labels for the `labels` prop, and in this case, an `Array` of colors of the same length for the `fill` prop. `fill` is easy: we can just use our previously defined `COLORS` variable. The `labels` prop a bit trickier. In this case, we will use the [getClassLabels](/docs/helpers/get-class-labels) helper function exported by `florence` to automatically create some labels for us based on the `priceColorScale`. To make the class boundaries look nice, we will turn them into integers by passing `Math.floor` to the `getClassLabels` function. 

```markup
<script>
  import { 
    Graphic, Section, PolygonLayer, createGeoScales,
    Label, DiscreteLegend, getClassLabels
  } from '@snlab/florence'
</script>

  ...
  <Label
    ...
  />

  <DiscreteLegend
    x1={300} x2={400}
    y1={300} y2={400}
    labels={getClassLabels(priceColorScale, Math.floor)}
    fill={COLORS}
  />
```

<Choropleth switchColor switchTitle switchLegend />

## Result

```js exec
import REPLWrapper from '../../components/REPLWrapper.svelte'
import choroplethFiles from './replFiles/choropleth.js'
```

<REPLWrapper replFiles={choroplethFiles} />
