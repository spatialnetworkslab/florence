# Creating Simple Choropleth Maps

Although the act of map making (cartography!) has much older roots than the concept of the 'grammar of graphics', the two are very much compatible. With some extensions, the grammar of graphics can also be used to create maps of any kind. 

`florence`'s coordinate systems and components support geospatial visualisations like maps. In combination with the [DataContainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) and [proj4](https://github.com/proj4js/proj4js), it furthermore supports pretty much any coordinate system used around the world. In this tutorial, you will learn how to construct a map that encodes data through color– a choropleth– using GeoJSON data.

## ⭐️Learning Goal(s)

In this tutorial, you will make a map of average resale prices in different planning areas of Singapore. You will use the following components:

- The [Graphic](docs/core/graphic)
- The [Section](docs/core/section)
- The [PolygonLayer](docs/marks/Polygon)
- The [createGeoScales](/docs/helpers/createGeoScales) helper function
- The [Label](docs/marks/label), to make a title
- The [DiscreteLegend](docs/guides/legend)

To manage our data, we will use the [DataContainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) library. In addition, the concept of scaling will be introduced through [d3 scales](https://github.com/d3/d3-scale).

## What data do we need?

Spatial data can be understood as a combination of spatial 'geometries' with non-spatial attributes. For example, a dataset of shops might consist of a set of pairs of cartesian or longitude-latitude coordinates (spatial geometries), and a complementary set of attributes like the names of shops and opening hours (non-spatial attributes). In online mapping, [GeoJSON](geojson.org) is the defacto standard to store spatial data. It is an extension (subset) of regular JSON that follows specific rules. In GeoJSON, a point might represented like this:

``` js
{
  type: 'Feature',
  geometry: {
    type: 'Point',
    coordinates: [125.6, 10.1]
  },
  properties: {
    name: 'Dinagat Islands'
  }
}
```

A 'Feature' has two additional keys: `geometry`, holding information about the spatial geometry; and `properties`, holding any additional non-spatial attributes. `florence`'s and its sidecar [DataContainer](https://gitlab.com/spatialnetworkslab/florence-datacontainer) library can work with GeoJSON out of the box.

## Importing and preparing the dataset

For this tutorial, we import a GeoJSON file of Singapore's planning areas and mean resale prices per square meter from the Housing & Development Board. Let's get started by making it available to our Svelte component. 

```js
import { geojson } from './planning_areas_data.js' 
```

Next, we will load this file to the `DataContainer`:

```js
const convertNullToUndefined = value => value === null ? undefined : value

const dataContainer = new DataContainer(geojson)
  .mutate({ resale_price_sqm: r => convertNullToUndefined(r.resale_price_sqm) })
```

TODO
TODO explain dollar sign syntax

For further details on loading data to the `DataContainer`, refer to its [documentation](https://gitlab.com/spatialnetworkslab/florence-datacontainer).

## Create your geospatial scales

In the case of maps, some data may be recorded in three-dimensional 'earth' coordinates while in other cases data might already be pre-projected in a two-dimensional plane for you. Even in this latter case, you still need to ensure that the spatial coordinates translate neatly to screen coordinates. 

To achieve this, we can no longer treat the x and y dimension separate but must take them into account together. Therefore, we need to set both the `scaleX` and `scaleY` property on our `Section` simultaneously. To make that easier, we use a helper function that `florence` exports, called `createGeoScales`, to take the geometry column in the data container as input and create the correct scales. The function returns an object with a `scaleX` and `scaleY` key that we can [spread](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) on the `Section`. 

Our code now looks like this:

```js
<script>
  import { Graphic, Section, PolygonLayer, createGeoScales } from '@snlab/florence'
  import DataContainer from '@snlab/florence-datacontainer'

  // import data
  // step1
  import geodata from '../data/planning_areas.js'
  const dataContainer = new DataContainer(geoData)

  // create geo scales
  const geoScales = createGeoScales(data.bbox())
</script>
```

## Set up your canvas for mapping

We are now ready to set up our 'canvas' for creating our map with the `Graphic` and `Section` components. After specifying the width and height of the `Graphic` (which creates an empty svg of the given width and height), we use the `geoScales` variable from our previous step to set the right scales for the `Section`. 

```markup
<script>
  import { Graphic, Section, PolygonLayer, createGeoScales } from '@snlab/florence'
  import DataContainer from '@snlab/florence-datacontainer'

  // import data
  // step1
  import geodata from '../data/planning_areas.js'
  const data = new DataContainer(geo)

  // create geo scales
  const geoScales = createGeoScales(data.domain('$geometry'))
</script>

<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    flipY
  >

  </Section>

</Graphic>
```

For further details on:
- `Section`, refer to the [documentation](docs/core/section).
- `Graphic`, refer to the [documentation](docs/core/graphic).

## Map your data
Next, we have to draw the actual Marks, one for each planning area. Instead of setting the usual `x` and `y` properties separately, we set a single `geometry` prop on the `Polygon` mark instead. The `geometry` prop in `Polygon` (or any Mark type) exepcts a GeoJSON object of type 'Polygon' or a function. For more information on what data to feed into `Polygon`, please refer to [its documentation.](docs/marks/polygon)

Since we are plotting multiple points in this example, the `PolygonLayer` component meets our purposes.

::: div callout
If we are plotting only a single polygon, we would use `Polygon`.
:::


```markup
<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    flipY
  >
    <!-- step 1 -->
    <PolygonLayer 
      geometry={data.column('$geometry')}
    />

  </Section>

</Graphic>
```

::: div callout
If we want to customize our map, we can do so by feeding appropriate values to aesthetic properties like `fill`, `stroke`, and `strokeWidth`. Refer to the [Polygon](docs/marks/Polygon) documentation for more details.
:::

```markup
<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    flipY
  >
    <!-- step 1 -->
    <PolygonLayer 
      geometry={data.column('$geometry')}
      fill={'#d3d3d3'} 
      stroke={'white'} 
      strokeWidth={1}
    />

  </Section>

</Graphic>
```

Our map now looks like this:

```js exec
import Choropleth from './utils/_Choropleth.svelte'
```

<Choropleth/>

All Florence `Marks` can be used alongside maps, with a similar property called `geometry` for plotting. For details of each, refer to the [Marks](docs/marks) documentation.

## Map your data to color to create a choropleth 
As you can see, it is easy to make a base map made of polygons using Florence components. Now we take it a step further – by creating a choropleth.

When we inspect our dataset (e.g. by using `console.log(data.data())`), we see that we have a column called `resale_price_sqm`:

![resale_price_sqm](/images/resale_photo.png)

We will use this as the basis for our choropleth. Notice that some values are `NaN`, indicating that these areas don't have any data available. We need to take that into account when assigning colors to our planning area polygons. 

### Assign colors to your data
For this tutorial, we will use five (5) colors to denote five thresholds in the data. The color `#d3d3d3` is added to the start of our `colors` array (index 0) to assign a color to planning areas *without data* for `resale_price_sqm`.

```js
  const colors = ['#d3d3d3', '#FFF5EB', '#FDD1A5', '#FD9243', '#DE4F05', '#7F2704']
```

To assign colors to our data, we first need to know what thresholds or breakpoint values within our data to use for each color. This is computed using the domain of `resale_price_sqm` and with the help of the `DataContainer`'s `bin` transformation, which helps us break the domain into equal intervals based on the length of the `colors` array above. 

::: div callout
We use `EqualInterval` here with __`numClasses` set to 4__ because we want to create 4 bins – this will give us `[[a, b], [b, c], [c, d], [d, e]]`. In turn, this gives us __5 threshold breakpoints__.
:::

```js
  // obtain bins from DataContainer method
  const binsData = data.dropNA('resale_price_sqm').bin({ groupBy: 'resale_price_sqm', method: 'EqualInterval', numClasses: colors.length - 2 })
```

After computing the new bins, we have to extract them to from the `binsData` container and turn them into a flat array called `thresholds`. 

```js
  // Obtain bins from data container
  let bins = binsData.column('bins')
```

We obtain the unique values from our flat array by enumerating through the bins and extracting values from the ends of the bins (and the start of the bin, for the first bin), such that we retain only unique values for our `thresholds` array. Note that we also use `Math.floor()` to make sure we get nice integer values for our thresholds.

```js
  // Flatten bins array into individual numbers: [[a, b], [b, c], [c, d]...] => [a, b, b, c, c, d...]
  // Get unique values from array and turn them into integers
  let thresholds = []
  for (let i = 0; i < bins.length; i += 1) {
    if (i === 0) {
      thresholds.push(Math.floor(bins[i][0]))
      thresholds.push(Math.floor(bins[i][1]))
    } else {
      thresholds.push(Math.floor(bins[i][1]))
    }
  }
```

In total, the process of obtaining our thresholds for creating our color scheme looks like this:

```js
  // obtain bins from DataContainer method
  const binsData = data.dropNA('resale_price_sqm').bin({ groupBy: 'resale_price_sqm', method: 'EqualInterval', numClasses: colors.length - 2 })
  
  // Obtain bins from data container
  const bins = binsData.column('bins')

  // Flatten bins array into individual numbers: [[a, b], [b, c], [c, d]...] => [a, b, b, c, c, d...]
  // Get unique values from array and turn them into integers
  let thresholds = []
  for (let i = 0; i < bins.length; i += 1) {
    if (i === 0) {
      thresholds.push(Math.floor(bins[i][0]))
      thresholds.push(Math.floor(bins[i][1]))
    } else {
      thresholds.push(Math.floor(bins[i][1]))
    }
  }
```

Lastly, we create the color scale named `priceColorScale` and map our data to it to generate the color value for each planning area according to `resale_price_sqm`.

```js
  const priceColorScale = scaleThreshold().domain(thresholds).range(colors)
  const priceColors = data.map('resale_price_sqm', priceColorScale)
```

In summary, the JS part of our code should now look like this:
```js
  import { Graphic, Section, PolygonLayer, createGeoScales, Title, DiscreteLegend } from '@snlab/florence';
  import DataContainer from '@snlab/florence-datacontainer';
  import { scaleThreshold } from 'd3-scale'

  export let switch1 = false
  export let switch2 = false
  export let switch3 = false

  // import data
  // step1
  import { geodata } from './planning_areas_data.js'
  const data = new DataContainer(geodata)
  const geoScales = createGeoScales(data.domain('$geometry'))

  // step 2
  // compute color scaling
  const colors = ['#d3d3d3', '#fff0d2', '#FDD1A5', '#FD9243', '#982f05', '#4e1802']

  // obtain bins from DataContainer method
  const binsData = data.dropNA('resale_price_sqm').bin({ groupBy: 'resale_price_sqm', method: 'EqualInterval', numClasses: colors.length - 2 })
  
  // Obtain bins from data container
  const bins = binsData.column('bins')

  // Flatten bins array into individual numbers: [[a, b], [b, c], [c, d]...] => [a, b, b, c, c, d...]
  // Get unique values from array and turn them into integers
  let thresholds = []
  for (let i = 0; i < bins.length; i += 1) {
    if (i === 0) {
      thresholds.push(Math.floor(bins[i][0]))
      thresholds.push(Math.floor(bins[i][1]))
    } else {
      thresholds.push(Math.floor(bins[i][1]))
    }
  }

  // step 3
  // assign colors
  const priceColorScale = scaleThreshold().domain(thresholds).range(colors)
  const priceColors = data.map('resale_price_sqm', priceColorScale)
```

The variable `priceColors` now contains an array that houses our colors for our planning areas – arranged in the same order as they are inside `DataContainer`.

### Add colors to your polygons
We are now ready to plot our choropleth map. Just replace the input to `fill` with `priceColors` and _voila_! Our simple map of Singapore is now a choropleth that shows us each planning area's mean HDB flat resale price per square meter.

```markup
  <PolygonLayer 
    geometry={data.column('$geometry')}
    fill={priceColors}
    stroke={'white'} 
    strokeWidth={1}
  />
```

<Choropleth switch1/>

## Plot Title (Optional)
Graphs usually come with titles describing the subject of the graph. This can be added using the `Title` component.

We also add some `padding` to the parent `Section` so that we can position our `Title` nicely.

<Choropleth switch1 switch2/>

Our code now looks like this:

```markup
<Graphic width={500} height={500}>

  <Section
    {...geoScales}
    padding={30}
    flipY
  >
    <!-- steps 1, 2 and 3 -->
    <PolygonLayer 
      geometry={data.column('$geometry')}
      fill={priceColors}
      stroke={'white'} 
      strokeWidth={1}
    />

    <!-- step 4 (optional) -->
    <Label
      x={() => 250}
      y={() => 50}
      text={'Mean resale price per m2 (S$)'}
      fontFamily={'Montserrat'}
      fontSize={18}
    />
  </Section>
</Graphic>
```

## Legend (optional)
Adding a legend to our plot will make it easier to understand what the colors mean. We can add a `DiscreteLegend` to explain the thresholds of each planning area's resale price per square meter.

Since our parent `Section` has `flipY` on, we also need to give our `DiscreteLegend` a `flipLabels` property so that our labels show up in the right order. For the same reason, we need to set `vjust='top'`
so that the legend positions itself at the bottom of the parent Section instead. Furthermore, we set `usePadding=true` so that our legend is positioned away from our map a bit more.

We are using thresholds to denote color, so we set our `labelAnchorPoint` to `r` so that it's clear that values above each number get colored a certain way.

<Choropleth switch1 switch2 switch3 />

```markup
  <Graphic width={500} height={500}>

    <Section
      {...geoScales}
      flipY
    >
      <!-- steps 1, 2 and 3 -->
      <PolygonLayer 
        geometry={data.column('$geometry')}
        fill={priceColors}
        stroke={'white'} 
        strokeWidth={1}
      />

      <!-- step 4 (optional) -->
      <Label
        x={() => 250}
        y={() => 50}
        text={'Mean resale price per m2 (S$)'}
        fontFamily={'Montserrat'}
        fontSize={18}
      />

      <!-- step 5 (optional) -->
      <DiscreteLegend
        fill={priceColorScale}
        labelAnchorPoint={'r'}
        title={'Mean Resale Price / m2 (SGD)'}
        orient={'horizontal'}
        vjust={'top'}
        hjust={'right'}
        flipLabels
        usePadding={true}
      />
    </Section>
  </Graphic>
```

## Sandbox

You can play around with the final map in the CodeSandbox below.
