{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../../../../node_modules/svero/src/Router.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { Router, Route, Link } from 'svero'\n\n  // import all playground examples here\n  import Rectangles from './pages/Rectangles.svelte'\n\n\n  // and add them to this component array\n  let components = [\n    { name: \"Rectangles\",\n      url: \"/rectangles\",\n      component: Rectangles\n    }\n  ]\n</script>\n\n<div class=\"flex-grid\">\n  <div class=\"left-col\">\n   <ul class=\"toc\">\n    {#each components as component}\n      <li><Link href={component.url}>{component.name}</Link></li>  \n    {/each}\n   </ul>\n  </div>\n  <div class=\"right-col\">\n    <Router>\n      <Route path=\"/\" component={components[0].component} />\n       {#each components as component}\n          <Route path={component.url} component={component.component} />\n        {/each}\n    </Router>\n  </div>\n</div>\n\n<style>\n.flex-grid {\n  display: flex;\n}\n\n.left-col {\n  margin-right: 20px;\n}\n\n.toc {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n</style>\n\n",
    "<script>\n  import Path from 'path-parser'\n  import { writable } from 'svelte/store';\n  import { onMount, getContext, setContext } from 'svelte';\n\n  let t;\n  let ctx;\n  let ctxLoaded = false;\n  let currentComponent = null;\n\n  const paths = [];\n  const activePath = writable(null);\n\n  function updateComponent(route, params = {}) {\n    if (currentComponent && currentComponent.$destroy) {\n      currentComponent.$destroy();\n      currentComponent = null;\n    }\n\n    $activePath = route.path;\n\n    if (!route.component) return;\n\n    currentComponent = new route.component({\n      target: ctx,\n      props: {\n        router: {\n          route,\n          params\n        }\n      }\n    });\n  }\n\n  function gotoRoute(route) {\n    history.pushState({}, '', route);\n\n    const popEvent = new Event('popstate');\n    window.dispatchEvent(popEvent);\n  }\n\n  function handleRoute(route, result) {\n    // If there is no condition, but there is a redirect, simply redirect\n    if (!route.condition && route.redirect) {\n      gotoRoute(route.redirect);\n      return true;\n    }\n\n    // If there is condition, handle it\n    if (route.condition && (typeof route.condition === 'boolean' || typeof route.condition === 'function')) {\n      if (typeof route.condition === 'boolean' && route.condition) {\n        updateComponent(route, result);\n        return true;\n      }\n\n      if (typeof route.condition === 'function' && route.condition()) {\n        updateComponent(route, result);\n        return true;\n      }\n\n      gotoRoute(route.redirect);\n      return true;\n    }\n\n    updateComponent(route, result);\n    return true;\n  }\n\n  function handlePopState() {\n    paths.some((route) => {\n      const browserPath = window.location.pathname;\n\n      // If route matches exactly the url path, load the component\n      // and stop the route checking\n      if (route.path === browserPath) {\n        return handleRoute(route);\n      }\n\n      // If route includes params, check if it matches with the URL\n      // and stop the route checking\n      if (route.path.includes(':')) {\n        const path = new Path(route.path);\n        const result = path.test(browserPath);\n\n        if (result) {\n          return handleRoute(route, result);\n        }\n      }\n\n      // If route is wildcard (*), fallbacks to the component\n      // and stop the route checking\n      if (route.path === '*') {\n        return handleRoute(route);\n      }\n    });\n  }\n\n  function debouncedHandlePopState() {\n    clearTimeout(t);\n    t = setTimeout(handlePopState, 100);\n  }\n\n  function assignRoute(route) {\n    paths.push(route);\n    debouncedHandlePopState();\n  }\n\n  function unassignRoute(path) {\n    const offset = paths.findIndex(route => route.path === path);\n\n    if (offset !== -1) {\n      paths.splice(offset, 1);\n      debouncedHandlePopState();\n    }\n  }\n\n  onMount(() => {\n    ctx = document.querySelector('[data-svero=\"ctx\"]').parentElement;\n    ctxLoaded = true;\n    debouncedHandlePopState();\n  });\n\n  setContext('__svero__', {\n    activePath,\n    paths,\n    gotoRoute,\n    assignRoute,\n    updateComponent\n  });\n</script>\n\n<style>\n  .ctx {\n    display: none;\n  }\n</style>\n\n<svelte:window on:popstate={handlePopState}></svelte:window>\n\n{#if !ctxLoaded}\n  <div class=\"ctx\" data-svero=\"ctx\"></div>\n{/if}\n\n<slot></slot>\n"
  ],
  "names": [],
  "mappings": "AAmCA,UAAU,aAAC,CAAC,AACV,OAAO,CAAE,IAAI,AACf,CAAC,AAED,SAAS,aAAC,CAAC,AACT,YAAY,CAAE,IAAI,AACpB,CAAC,AAED,IAAI,aAAC,CAAC,AACJ,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC;ACqFC,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC"
}